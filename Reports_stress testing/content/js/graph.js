/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 295.0, "minX": 0.0, "maxY": 9249.0, "series": [{"data": [[0.0, 296.0], [0.1, 296.0], [0.2, 297.0], [0.3, 298.0], [0.4, 298.0], [0.5, 299.0], [0.6, 299.0], [0.7, 299.0], [0.8, 299.0], [0.9, 300.0], [1.0, 300.0], [1.1, 300.0], [1.2, 300.0], [1.3, 300.0], [1.4, 300.0], [1.5, 301.0], [1.6, 301.0], [1.7, 301.0], [1.8, 301.0], [1.9, 301.0], [2.0, 301.0], [2.1, 301.0], [2.2, 301.0], [2.3, 301.0], [2.4, 301.0], [2.5, 301.0], [2.6, 301.0], [2.7, 301.0], [2.8, 302.0], [2.9, 302.0], [3.0, 302.0], [3.1, 302.0], [3.2, 302.0], [3.3, 302.0], [3.4, 302.0], [3.5, 302.0], [3.6, 302.0], [3.7, 302.0], [3.8, 302.0], [3.9, 302.0], [4.0, 303.0], [4.1, 303.0], [4.2, 303.0], [4.3, 303.0], [4.4, 303.0], [4.5, 303.0], [4.6, 303.0], [4.7, 303.0], [4.8, 303.0], [4.9, 303.0], [5.0, 303.0], [5.1, 303.0], [5.2, 303.0], [5.3, 303.0], [5.4, 303.0], [5.5, 303.0], [5.6, 303.0], [5.7, 303.0], [5.8, 303.0], [5.9, 303.0], [6.0, 303.0], [6.1, 303.0], [6.2, 303.0], [6.3, 304.0], [6.4, 304.0], [6.5, 304.0], [6.6, 304.0], [6.7, 304.0], [6.8, 304.0], [6.9, 304.0], [7.0, 304.0], [7.1, 304.0], [7.2, 304.0], [7.3, 304.0], [7.4, 304.0], [7.5, 304.0], [7.6, 304.0], [7.7, 304.0], [7.8, 304.0], [7.9, 304.0], [8.0, 304.0], [8.1, 304.0], [8.2, 304.0], [8.3, 304.0], [8.4, 304.0], [8.5, 304.0], [8.6, 304.0], [8.7, 304.0], [8.8, 304.0], [8.9, 304.0], [9.0, 304.0], [9.1, 304.0], [9.2, 304.0], [9.3, 305.0], [9.4, 305.0], [9.5, 305.0], [9.6, 305.0], [9.7, 305.0], [9.8, 305.0], [9.9, 305.0], [10.0, 305.0], [10.1, 305.0], [10.2, 305.0], [10.3, 305.0], [10.4, 305.0], [10.5, 305.0], [10.6, 305.0], [10.7, 305.0], [10.8, 305.0], [10.9, 305.0], [11.0, 305.0], [11.1, 305.0], [11.2, 305.0], [11.3, 305.0], [11.4, 305.0], [11.5, 305.0], [11.6, 305.0], [11.7, 305.0], [11.8, 305.0], [11.9, 305.0], [12.0, 305.0], [12.1, 305.0], [12.2, 305.0], [12.3, 305.0], [12.4, 305.0], [12.5, 305.0], [12.6, 305.0], [12.7, 306.0], [12.8, 306.0], [12.9, 306.0], [13.0, 306.0], [13.1, 306.0], [13.2, 306.0], [13.3, 306.0], [13.4, 306.0], [13.5, 306.0], [13.6, 306.0], [13.7, 306.0], [13.8, 306.0], [13.9, 306.0], [14.0, 306.0], [14.1, 306.0], [14.2, 306.0], [14.3, 306.0], [14.4, 306.0], [14.5, 306.0], [14.6, 306.0], [14.7, 306.0], [14.8, 306.0], [14.9, 306.0], [15.0, 306.0], [15.1, 306.0], [15.2, 306.0], [15.3, 306.0], [15.4, 306.0], [15.5, 306.0], [15.6, 306.0], [15.7, 306.0], [15.8, 306.0], [15.9, 306.0], [16.0, 306.0], [16.1, 306.0], [16.2, 306.0], [16.3, 307.0], [16.4, 307.0], [16.5, 307.0], [16.6, 307.0], [16.7, 307.0], [16.8, 307.0], [16.9, 307.0], [17.0, 307.0], [17.1, 307.0], [17.2, 307.0], [17.3, 307.0], [17.4, 307.0], [17.5, 307.0], [17.6, 307.0], [17.7, 307.0], [17.8, 307.0], [17.9, 307.0], [18.0, 307.0], [18.1, 307.0], [18.2, 307.0], [18.3, 307.0], [18.4, 307.0], [18.5, 307.0], [18.6, 307.0], [18.7, 307.0], [18.8, 307.0], [18.9, 307.0], [19.0, 307.0], [19.1, 307.0], [19.2, 307.0], [19.3, 307.0], [19.4, 307.0], [19.5, 307.0], [19.6, 307.0], [19.7, 307.0], [19.8, 307.0], [19.9, 307.0], [20.0, 307.0], [20.1, 307.0], [20.2, 307.0], [20.3, 307.0], [20.4, 308.0], [20.5, 308.0], [20.6, 308.0], [20.7, 308.0], [20.8, 308.0], [20.9, 308.0], [21.0, 308.0], [21.1, 308.0], [21.2, 308.0], [21.3, 308.0], [21.4, 308.0], [21.5, 308.0], [21.6, 308.0], [21.7, 308.0], [21.8, 308.0], [21.9, 308.0], [22.0, 308.0], [22.1, 308.0], [22.2, 308.0], [22.3, 308.0], [22.4, 308.0], [22.5, 308.0], [22.6, 308.0], [22.7, 308.0], [22.8, 308.0], [22.9, 308.0], [23.0, 308.0], [23.1, 308.0], [23.2, 308.0], [23.3, 308.0], [23.4, 308.0], [23.5, 308.0], [23.6, 308.0], [23.7, 308.0], [23.8, 308.0], [23.9, 308.0], [24.0, 308.0], [24.1, 308.0], [24.2, 308.0], [24.3, 308.0], [24.4, 308.0], [24.5, 308.0], [24.6, 309.0], [24.7, 309.0], [24.8, 309.0], [24.9, 309.0], [25.0, 309.0], [25.1, 309.0], [25.2, 309.0], [25.3, 309.0], [25.4, 309.0], [25.5, 309.0], [25.6, 309.0], [25.7, 309.0], [25.8, 309.0], [25.9, 309.0], [26.0, 309.0], [26.1, 309.0], [26.2, 309.0], [26.3, 309.0], [26.4, 309.0], [26.5, 309.0], [26.6, 309.0], [26.7, 309.0], [26.8, 309.0], [26.9, 309.0], [27.0, 309.0], [27.1, 309.0], [27.2, 309.0], [27.3, 309.0], [27.4, 309.0], [27.5, 309.0], [27.6, 309.0], [27.7, 309.0], [27.8, 309.0], [27.9, 309.0], [28.0, 309.0], [28.1, 309.0], [28.2, 309.0], [28.3, 309.0], [28.4, 309.0], [28.5, 309.0], [28.6, 309.0], [28.7, 309.0], [28.8, 309.0], [28.9, 309.0], [29.0, 309.0], [29.1, 309.0], [29.2, 309.0], [29.3, 309.0], [29.4, 309.0], [29.5, 309.0], [29.6, 309.0], [29.7, 309.0], [29.8, 309.0], [29.9, 309.0], [30.0, 309.0], [30.1, 310.0], [30.2, 310.0], [30.3, 310.0], [30.4, 310.0], [30.5, 310.0], [30.6, 310.0], [30.7, 310.0], [30.8, 310.0], [30.9, 310.0], [31.0, 310.0], [31.1, 310.0], [31.2, 310.0], [31.3, 310.0], [31.4, 310.0], [31.5, 310.0], [31.6, 310.0], [31.7, 310.0], [31.8, 310.0], [31.9, 310.0], [32.0, 310.0], [32.1, 310.0], [32.2, 310.0], [32.3, 310.0], [32.4, 310.0], [32.5, 310.0], [32.6, 310.0], [32.7, 310.0], [32.8, 310.0], [32.9, 310.0], [33.0, 310.0], [33.1, 310.0], [33.2, 310.0], [33.3, 310.0], [33.4, 310.0], [33.5, 310.0], [33.6, 310.0], [33.7, 310.0], [33.8, 310.0], [33.9, 310.0], [34.0, 310.0], [34.1, 310.0], [34.2, 310.0], [34.3, 310.0], [34.4, 310.0], [34.5, 310.0], [34.6, 310.0], [34.7, 310.0], [34.8, 310.0], [34.9, 310.0], [35.0, 310.0], [35.1, 310.0], [35.2, 310.0], [35.3, 310.0], [35.4, 310.0], [35.5, 310.0], [35.6, 311.0], [35.7, 311.0], [35.8, 311.0], [35.9, 311.0], [36.0, 311.0], [36.1, 311.0], [36.2, 311.0], [36.3, 311.0], [36.4, 311.0], [36.5, 311.0], [36.6, 311.0], [36.7, 311.0], [36.8, 311.0], [36.9, 311.0], [37.0, 311.0], [37.1, 311.0], [37.2, 311.0], [37.3, 311.0], [37.4, 311.0], [37.5, 311.0], [37.6, 311.0], [37.7, 311.0], [37.8, 311.0], [37.9, 311.0], [38.0, 311.0], [38.1, 311.0], [38.2, 311.0], [38.3, 311.0], [38.4, 311.0], [38.5, 311.0], [38.6, 311.0], [38.7, 311.0], [38.8, 311.0], [38.9, 311.0], [39.0, 311.0], [39.1, 311.0], [39.2, 311.0], [39.3, 311.0], [39.4, 311.0], [39.5, 311.0], [39.6, 311.0], [39.7, 311.0], [39.8, 311.0], [39.9, 311.0], [40.0, 311.0], [40.1, 311.0], [40.2, 311.0], [40.3, 311.0], [40.4, 311.0], [40.5, 311.0], [40.6, 311.0], [40.7, 311.0], [40.8, 311.0], [40.9, 311.0], [41.0, 311.0], [41.1, 311.0], [41.2, 311.0], [41.3, 311.0], [41.4, 311.0], [41.5, 311.0], [41.6, 311.0], [41.7, 312.0], [41.8, 312.0], [41.9, 312.0], [42.0, 312.0], [42.1, 312.0], [42.2, 312.0], [42.3, 312.0], [42.4, 312.0], [42.5, 312.0], [42.6, 312.0], [42.7, 312.0], [42.8, 312.0], [42.9, 312.0], [43.0, 312.0], [43.1, 312.0], [43.2, 312.0], [43.3, 312.0], [43.4, 312.0], [43.5, 312.0], [43.6, 312.0], [43.7, 312.0], [43.8, 312.0], [43.9, 312.0], [44.0, 312.0], [44.1, 312.0], [44.2, 312.0], [44.3, 312.0], [44.4, 312.0], [44.5, 312.0], [44.6, 312.0], [44.7, 312.0], [44.8, 312.0], [44.9, 312.0], [45.0, 312.0], [45.1, 312.0], [45.2, 312.0], [45.3, 312.0], [45.4, 312.0], [45.5, 312.0], [45.6, 312.0], [45.7, 312.0], [45.8, 312.0], [45.9, 312.0], [46.0, 312.0], [46.1, 312.0], [46.2, 312.0], [46.3, 312.0], [46.4, 312.0], [46.5, 312.0], [46.6, 312.0], [46.7, 312.0], [46.8, 312.0], [46.9, 312.0], [47.0, 312.0], [47.1, 312.0], [47.2, 313.0], [47.3, 313.0], [47.4, 313.0], [47.5, 313.0], [47.6, 313.0], [47.7, 313.0], [47.8, 313.0], [47.9, 313.0], [48.0, 313.0], [48.1, 313.0], [48.2, 313.0], [48.3, 313.0], [48.4, 313.0], [48.5, 313.0], [48.6, 313.0], [48.7, 313.0], [48.8, 313.0], [48.9, 313.0], [49.0, 313.0], [49.1, 313.0], [49.2, 313.0], [49.3, 313.0], [49.4, 313.0], [49.5, 313.0], [49.6, 313.0], [49.7, 313.0], [49.8, 313.0], [49.9, 313.0], [50.0, 313.0], [50.1, 313.0], [50.2, 313.0], [50.3, 313.0], [50.4, 313.0], [50.5, 313.0], [50.6, 313.0], [50.7, 313.0], [50.8, 313.0], [50.9, 313.0], [51.0, 313.0], [51.1, 313.0], [51.2, 313.0], [51.3, 313.0], [51.4, 313.0], [51.5, 313.0], [51.6, 313.0], [51.7, 313.0], [51.8, 313.0], [51.9, 313.0], [52.0, 313.0], [52.1, 313.0], [52.2, 313.0], [52.3, 313.0], [52.4, 313.0], [52.5, 313.0], [52.6, 313.0], [52.7, 313.0], [52.8, 313.0], [52.9, 313.0], [53.0, 313.0], [53.1, 313.0], [53.2, 313.0], [53.3, 313.0], [53.4, 313.0], [53.5, 313.0], [53.6, 313.0], [53.7, 314.0], [53.8, 314.0], [53.9, 314.0], [54.0, 314.0], [54.1, 314.0], [54.2, 314.0], [54.3, 314.0], [54.4, 314.0], [54.5, 314.0], [54.6, 314.0], [54.7, 314.0], [54.8, 314.0], [54.9, 314.0], [55.0, 314.0], [55.1, 314.0], [55.2, 314.0], [55.3, 314.0], [55.4, 314.0], [55.5, 314.0], [55.6, 314.0], [55.7, 314.0], [55.8, 314.0], [55.9, 314.0], [56.0, 314.0], [56.1, 314.0], [56.2, 314.0], [56.3, 314.0], [56.4, 314.0], [56.5, 314.0], [56.6, 314.0], [56.7, 314.0], [56.8, 314.0], [56.9, 314.0], [57.0, 314.0], [57.1, 314.0], [57.2, 314.0], [57.3, 314.0], [57.4, 314.0], [57.5, 314.0], [57.6, 314.0], [57.7, 314.0], [57.8, 314.0], [57.9, 314.0], [58.0, 314.0], [58.1, 314.0], [58.2, 314.0], [58.3, 314.0], [58.4, 314.0], [58.5, 314.0], [58.6, 314.0], [58.7, 314.0], [58.8, 315.0], [58.9, 315.0], [59.0, 315.0], [59.1, 315.0], [59.2, 315.0], [59.3, 315.0], [59.4, 315.0], [59.5, 315.0], [59.6, 315.0], [59.7, 315.0], [59.8, 315.0], [59.9, 315.0], [60.0, 315.0], [60.1, 315.0], [60.2, 315.0], [60.3, 315.0], [60.4, 315.0], [60.5, 315.0], [60.6, 315.0], [60.7, 315.0], [60.8, 315.0], [60.9, 315.0], [61.0, 315.0], [61.1, 315.0], [61.2, 315.0], [61.3, 315.0], [61.4, 315.0], [61.5, 315.0], [61.6, 315.0], [61.7, 315.0], [61.8, 315.0], [61.9, 315.0], [62.0, 315.0], [62.1, 315.0], [62.2, 315.0], [62.3, 315.0], [62.4, 315.0], [62.5, 315.0], [62.6, 315.0], [62.7, 315.0], [62.8, 315.0], [62.9, 315.0], [63.0, 315.0], [63.1, 315.0], [63.2, 315.0], [63.3, 316.0], [63.4, 316.0], [63.5, 316.0], [63.6, 316.0], [63.7, 316.0], [63.8, 316.0], [63.9, 316.0], [64.0, 316.0], [64.1, 316.0], [64.2, 316.0], [64.3, 316.0], [64.4, 316.0], [64.5, 316.0], [64.6, 316.0], [64.7, 316.0], [64.8, 316.0], [64.9, 316.0], [65.0, 316.0], [65.1, 316.0], [65.2, 316.0], [65.3, 316.0], [65.4, 316.0], [65.5, 316.0], [65.6, 316.0], [65.7, 316.0], [65.8, 316.0], [65.9, 316.0], [66.0, 316.0], [66.1, 316.0], [66.2, 316.0], [66.3, 316.0], [66.4, 316.0], [66.5, 316.0], [66.6, 316.0], [66.7, 316.0], [66.8, 316.0], [66.9, 316.0], [67.0, 316.0], [67.1, 316.0], [67.2, 316.0], [67.3, 317.0], [67.4, 317.0], [67.5, 317.0], [67.6, 317.0], [67.7, 317.0], [67.8, 317.0], [67.9, 317.0], [68.0, 317.0], [68.1, 317.0], [68.2, 317.0], [68.3, 317.0], [68.4, 317.0], [68.5, 317.0], [68.6, 317.0], [68.7, 317.0], [68.8, 317.0], [68.9, 317.0], [69.0, 317.0], [69.1, 317.0], [69.2, 317.0], [69.3, 317.0], [69.4, 317.0], [69.5, 317.0], [69.6, 317.0], [69.7, 317.0], [69.8, 317.0], [69.9, 317.0], [70.0, 317.0], [70.1, 317.0], [70.2, 317.0], [70.3, 317.0], [70.4, 317.0], [70.5, 317.0], [70.6, 317.0], [70.7, 317.0], [70.8, 317.0], [70.9, 317.0], [71.0, 317.0], [71.1, 317.0], [71.2, 317.0], [71.3, 317.0], [71.4, 317.0], [71.5, 317.0], [71.6, 317.0], [71.7, 317.0], [71.8, 318.0], [71.9, 318.0], [72.0, 318.0], [72.1, 318.0], [72.2, 318.0], [72.3, 318.0], [72.4, 318.0], [72.5, 318.0], [72.6, 318.0], [72.7, 318.0], [72.8, 318.0], [72.9, 318.0], [73.0, 318.0], [73.1, 318.0], [73.2, 318.0], [73.3, 318.0], [73.4, 318.0], [73.5, 318.0], [73.6, 318.0], [73.7, 318.0], [73.8, 318.0], [73.9, 318.0], [74.0, 318.0], [74.1, 318.0], [74.2, 318.0], [74.3, 318.0], [74.4, 318.0], [74.5, 318.0], [74.6, 318.0], [74.7, 318.0], [74.8, 318.0], [74.9, 318.0], [75.0, 318.0], [75.1, 319.0], [75.2, 319.0], [75.3, 319.0], [75.4, 319.0], [75.5, 319.0], [75.6, 319.0], [75.7, 319.0], [75.8, 319.0], [75.9, 319.0], [76.0, 319.0], [76.1, 319.0], [76.2, 319.0], [76.3, 319.0], [76.4, 319.0], [76.5, 319.0], [76.6, 319.0], [76.7, 319.0], [76.8, 319.0], [76.9, 319.0], [77.0, 319.0], [77.1, 319.0], [77.2, 319.0], [77.3, 319.0], [77.4, 319.0], [77.5, 319.0], [77.6, 319.0], [77.7, 319.0], [77.8, 319.0], [77.9, 319.0], [78.0, 319.0], [78.1, 320.0], [78.2, 320.0], [78.3, 320.0], [78.4, 320.0], [78.5, 320.0], [78.6, 320.0], [78.7, 320.0], [78.8, 320.0], [78.9, 320.0], [79.0, 320.0], [79.1, 320.0], [79.2, 320.0], [79.3, 320.0], [79.4, 320.0], [79.5, 320.0], [79.6, 320.0], [79.7, 320.0], [79.8, 320.0], [79.9, 320.0], [80.0, 320.0], [80.1, 320.0], [80.2, 320.0], [80.3, 320.0], [80.4, 320.0], [80.5, 320.0], [80.6, 320.0], [80.7, 320.0], [80.8, 320.0], [80.9, 320.0], [81.0, 320.0], [81.1, 320.0], [81.2, 320.0], [81.3, 320.0], [81.4, 321.0], [81.5, 321.0], [81.6, 321.0], [81.7, 321.0], [81.8, 321.0], [81.9, 321.0], [82.0, 321.0], [82.1, 321.0], [82.2, 321.0], [82.3, 321.0], [82.4, 321.0], [82.5, 321.0], [82.6, 321.0], [82.7, 321.0], [82.8, 321.0], [82.9, 321.0], [83.0, 321.0], [83.1, 321.0], [83.2, 321.0], [83.3, 321.0], [83.4, 322.0], [83.5, 322.0], [83.6, 322.0], [83.7, 322.0], [83.8, 322.0], [83.9, 322.0], [84.0, 322.0], [84.1, 322.0], [84.2, 322.0], [84.3, 322.0], [84.4, 322.0], [84.5, 322.0], [84.6, 322.0], [84.7, 322.0], [84.8, 322.0], [84.9, 322.0], [85.0, 322.0], [85.1, 322.0], [85.2, 323.0], [85.3, 323.0], [85.4, 323.0], [85.5, 323.0], [85.6, 323.0], [85.7, 323.0], [85.8, 323.0], [85.9, 323.0], [86.0, 323.0], [86.1, 323.0], [86.2, 323.0], [86.3, 323.0], [86.4, 323.0], [86.5, 324.0], [86.6, 324.0], [86.7, 324.0], [86.8, 324.0], [86.9, 324.0], [87.0, 324.0], [87.1, 324.0], [87.2, 324.0], [87.3, 324.0], [87.4, 324.0], [87.5, 324.0], [87.6, 324.0], [87.7, 324.0], [87.8, 324.0], [87.9, 324.0], [88.0, 324.0], [88.1, 325.0], [88.2, 325.0], [88.3, 325.0], [88.4, 325.0], [88.5, 325.0], [88.6, 325.0], [88.7, 325.0], [88.8, 326.0], [88.9, 326.0], [89.0, 326.0], [89.1, 326.0], [89.2, 326.0], [89.3, 327.0], [89.4, 327.0], [89.5, 327.0], [89.6, 327.0], [89.7, 327.0], [89.8, 327.0], [89.9, 327.0], [90.0, 328.0], [90.1, 328.0], [90.2, 328.0], [90.3, 328.0], [90.4, 328.0], [90.5, 328.0], [90.6, 329.0], [90.7, 329.0], [90.8, 329.0], [90.9, 329.0], [91.0, 330.0], [91.1, 330.0], [91.2, 330.0], [91.3, 330.0], [91.4, 330.0], [91.5, 331.0], [91.6, 331.0], [91.7, 331.0], [91.8, 332.0], [91.9, 332.0], [92.0, 332.0], [92.1, 332.0], [92.2, 333.0], [92.3, 333.0], [92.4, 333.0], [92.5, 334.0], [92.6, 334.0], [92.7, 335.0], [92.8, 335.0], [92.9, 335.0], [93.0, 336.0], [93.1, 336.0], [93.2, 336.0], [93.3, 337.0], [93.4, 337.0], [93.5, 337.0], [93.6, 337.0], [93.7, 337.0], [93.8, 337.0], [93.9, 338.0], [94.0, 338.0], [94.1, 339.0], [94.2, 339.0], [94.3, 339.0], [94.4, 339.0], [94.5, 339.0], [94.6, 339.0], [94.7, 340.0], [94.8, 340.0], [94.9, 341.0], [95.0, 341.0], [95.1, 342.0], [95.2, 342.0], [95.3, 343.0], [95.4, 343.0], [95.5, 343.0], [95.6, 344.0], [95.7, 345.0], [95.8, 345.0], [95.9, 345.0], [96.0, 346.0], [96.1, 346.0], [96.2, 346.0], [96.3, 347.0], [96.4, 347.0], [96.5, 348.0], [96.6, 349.0], [96.7, 349.0], [96.8, 351.0], [96.9, 351.0], [97.0, 352.0], [97.1, 354.0], [97.2, 355.0], [97.3, 356.0], [97.4, 357.0], [97.5, 360.0], [97.6, 365.0], [97.7, 366.0], [97.8, 368.0], [97.9, 371.0], [98.0, 372.0], [98.1, 373.0], [98.2, 373.0], [98.3, 381.0], [98.4, 386.0], [98.5, 389.0], [98.6, 397.0], [98.7, 403.0], [98.8, 410.0], [98.9, 415.0], [99.0, 417.0], [99.1, 422.0], [99.2, 436.0], [99.3, 438.0], [99.4, 459.0], [99.5, 1102.0], [99.6, 1266.0], [99.7, 3307.0], [99.8, 4311.0], [99.9, 4318.0], [100.0, 6314.0]], "isOverall": false, "label": "Create Booking", "isController": false}, {"data": [[0.0, 1188.0], [0.1, 1194.0], [0.2, 1196.0], [0.3, 1201.0], [0.4, 1202.0], [0.5, 1204.0], [0.6, 1204.0], [0.7, 1206.0], [0.8, 1208.0], [0.9, 1208.0], [1.0, 1209.0], [1.1, 1209.0], [1.2, 1210.0], [1.3, 1210.0], [1.4, 1211.0], [1.5, 1211.0], [1.6, 1211.0], [1.7, 1212.0], [1.8, 1212.0], [1.9, 1212.0], [2.0, 1212.0], [2.1, 1213.0], [2.2, 1213.0], [2.3, 1213.0], [2.4, 1213.0], [2.5, 1213.0], [2.6, 1214.0], [2.7, 1214.0], [2.8, 1214.0], [2.9, 1215.0], [3.0, 1215.0], [3.1, 1215.0], [3.2, 1216.0], [3.3, 1216.0], [3.4, 1216.0], [3.5, 1216.0], [3.6, 1217.0], [3.7, 1217.0], [3.8, 1217.0], [3.9, 1217.0], [4.0, 1217.0], [4.1, 1218.0], [4.2, 1218.0], [4.3, 1218.0], [4.4, 1218.0], [4.5, 1218.0], [4.6, 1219.0], [4.7, 1219.0], [4.8, 1219.0], [4.9, 1219.0], [5.0, 1220.0], [5.1, 1220.0], [5.2, 1220.0], [5.3, 1220.0], [5.4, 1220.0], [5.5, 1221.0], [5.6, 1221.0], [5.7, 1221.0], [5.8, 1221.0], [5.9, 1221.0], [6.0, 1222.0], [6.1, 1222.0], [6.2, 1222.0], [6.3, 1222.0], [6.4, 1223.0], [6.5, 1223.0], [6.6, 1223.0], [6.7, 1223.0], [6.8, 1224.0], [6.9, 1224.0], [7.0, 1224.0], [7.1, 1224.0], [7.2, 1224.0], [7.3, 1224.0], [7.4, 1225.0], [7.5, 1225.0], [7.6, 1225.0], [7.7, 1225.0], [7.8, 1225.0], [7.9, 1225.0], [8.0, 1225.0], [8.1, 1225.0], [8.2, 1226.0], [8.3, 1226.0], [8.4, 1226.0], [8.5, 1226.0], [8.6, 1226.0], [8.7, 1226.0], [8.8, 1226.0], [8.9, 1226.0], [9.0, 1227.0], [9.1, 1227.0], [9.2, 1227.0], [9.3, 1227.0], [9.4, 1227.0], [9.5, 1227.0], [9.6, 1227.0], [9.7, 1227.0], [9.8, 1227.0], [9.9, 1228.0], [10.0, 1228.0], [10.1, 1228.0], [10.2, 1228.0], [10.3, 1228.0], [10.4, 1228.0], [10.5, 1228.0], [10.6, 1228.0], [10.7, 1228.0], [10.8, 1229.0], [10.9, 1229.0], [11.0, 1229.0], [11.1, 1229.0], [11.2, 1229.0], [11.3, 1229.0], [11.4, 1230.0], [11.5, 1230.0], [11.6, 1230.0], [11.7, 1230.0], [11.8, 1230.0], [11.9, 1230.0], [12.0, 1230.0], [12.1, 1230.0], [12.2, 1230.0], [12.3, 1231.0], [12.4, 1231.0], [12.5, 1231.0], [12.6, 1231.0], [12.7, 1231.0], [12.8, 1231.0], [12.9, 1231.0], [13.0, 1232.0], [13.1, 1232.0], [13.2, 1232.0], [13.3, 1232.0], [13.4, 1232.0], [13.5, 1232.0], [13.6, 1232.0], [13.7, 1232.0], [13.8, 1233.0], [13.9, 1233.0], [14.0, 1233.0], [14.1, 1233.0], [14.2, 1233.0], [14.3, 1233.0], [14.4, 1233.0], [14.5, 1233.0], [14.6, 1233.0], [14.7, 1233.0], [14.8, 1233.0], [14.9, 1234.0], [15.0, 1234.0], [15.1, 1234.0], [15.2, 1234.0], [15.3, 1234.0], [15.4, 1234.0], [15.5, 1234.0], [15.6, 1234.0], [15.7, 1234.0], [15.8, 1235.0], [15.9, 1235.0], [16.0, 1235.0], [16.1, 1235.0], [16.2, 1235.0], [16.3, 1235.0], [16.4, 1235.0], [16.5, 1235.0], [16.6, 1235.0], [16.7, 1235.0], [16.8, 1236.0], [16.9, 1236.0], [17.0, 1236.0], [17.1, 1236.0], [17.2, 1236.0], [17.3, 1236.0], [17.4, 1236.0], [17.5, 1236.0], [17.6, 1236.0], [17.7, 1236.0], [17.8, 1237.0], [17.9, 1237.0], [18.0, 1237.0], [18.1, 1237.0], [18.2, 1237.0], [18.3, 1237.0], [18.4, 1237.0], [18.5, 1238.0], [18.6, 1238.0], [18.7, 1238.0], [18.8, 1238.0], [18.9, 1238.0], [19.0, 1238.0], [19.1, 1238.0], [19.2, 1238.0], [19.3, 1238.0], [19.4, 1238.0], [19.5, 1238.0], [19.6, 1239.0], [19.7, 1239.0], [19.8, 1239.0], [19.9, 1239.0], [20.0, 1239.0], [20.1, 1239.0], [20.2, 1239.0], [20.3, 1239.0], [20.4, 1239.0], [20.5, 1239.0], [20.6, 1239.0], [20.7, 1239.0], [20.8, 1240.0], [20.9, 1240.0], [21.0, 1240.0], [21.1, 1240.0], [21.2, 1240.0], [21.3, 1240.0], [21.4, 1240.0], [21.5, 1240.0], [21.6, 1240.0], [21.7, 1241.0], [21.8, 1241.0], [21.9, 1241.0], [22.0, 1241.0], [22.1, 1241.0], [22.2, 1241.0], [22.3, 1241.0], [22.4, 1241.0], [22.5, 1241.0], [22.6, 1241.0], [22.7, 1242.0], [22.8, 1242.0], [22.9, 1242.0], [23.0, 1242.0], [23.1, 1242.0], [23.2, 1242.0], [23.3, 1242.0], [23.4, 1242.0], [23.5, 1242.0], [23.6, 1242.0], [23.7, 1242.0], [23.8, 1242.0], [23.9, 1242.0], [24.0, 1242.0], [24.1, 1243.0], [24.2, 1243.0], [24.3, 1243.0], [24.4, 1243.0], [24.5, 1243.0], [24.6, 1243.0], [24.7, 1243.0], [24.8, 1243.0], [24.9, 1243.0], [25.0, 1243.0], [25.1, 1243.0], [25.2, 1243.0], [25.3, 1243.0], [25.4, 1243.0], [25.5, 1243.0], [25.6, 1243.0], [25.7, 1243.0], [25.8, 1244.0], [25.9, 1244.0], [26.0, 1244.0], [26.1, 1244.0], [26.2, 1244.0], [26.3, 1244.0], [26.4, 1244.0], [26.5, 1244.0], [26.6, 1244.0], [26.7, 1244.0], [26.8, 1244.0], [26.9, 1244.0], [27.0, 1245.0], [27.1, 1245.0], [27.2, 1245.0], [27.3, 1245.0], [27.4, 1245.0], [27.5, 1245.0], [27.6, 1245.0], [27.7, 1245.0], [27.8, 1245.0], [27.9, 1245.0], [28.0, 1245.0], [28.1, 1245.0], [28.2, 1246.0], [28.3, 1246.0], [28.4, 1246.0], [28.5, 1246.0], [28.6, 1246.0], [28.7, 1246.0], [28.8, 1246.0], [28.9, 1246.0], [29.0, 1246.0], [29.1, 1246.0], [29.2, 1246.0], [29.3, 1246.0], [29.4, 1246.0], [29.5, 1247.0], [29.6, 1247.0], [29.7, 1247.0], [29.8, 1247.0], [29.9, 1247.0], [30.0, 1247.0], [30.1, 1247.0], [30.2, 1247.0], [30.3, 1247.0], [30.4, 1247.0], [30.5, 1247.0], [30.6, 1247.0], [30.7, 1247.0], [30.8, 1248.0], [30.9, 1248.0], [31.0, 1248.0], [31.1, 1248.0], [31.2, 1248.0], [31.3, 1248.0], [31.4, 1248.0], [31.5, 1248.0], [31.6, 1248.0], [31.7, 1249.0], [31.8, 1249.0], [31.9, 1249.0], [32.0, 1249.0], [32.1, 1249.0], [32.2, 1249.0], [32.3, 1249.0], [32.4, 1249.0], [32.5, 1249.0], [32.6, 1249.0], [32.7, 1250.0], [32.8, 1250.0], [32.9, 1250.0], [33.0, 1250.0], [33.1, 1250.0], [33.2, 1250.0], [33.3, 1250.0], [33.4, 1250.0], [33.5, 1250.0], [33.6, 1250.0], [33.7, 1250.0], [33.8, 1251.0], [33.9, 1251.0], [34.0, 1251.0], [34.1, 1251.0], [34.2, 1251.0], [34.3, 1251.0], [34.4, 1251.0], [34.5, 1251.0], [34.6, 1251.0], [34.7, 1251.0], [34.8, 1251.0], [34.9, 1251.0], [35.0, 1251.0], [35.1, 1252.0], [35.2, 1252.0], [35.3, 1252.0], [35.4, 1252.0], [35.5, 1252.0], [35.6, 1252.0], [35.7, 1252.0], [35.8, 1252.0], [35.9, 1252.0], [36.0, 1252.0], [36.1, 1252.0], [36.2, 1252.0], [36.3, 1252.0], [36.4, 1252.0], [36.5, 1253.0], [36.6, 1253.0], [36.7, 1253.0], [36.8, 1253.0], [36.9, 1253.0], [37.0, 1253.0], [37.1, 1253.0], [37.2, 1253.0], [37.3, 1253.0], [37.4, 1253.0], [37.5, 1253.0], [37.6, 1253.0], [37.7, 1253.0], [37.8, 1254.0], [37.9, 1254.0], [38.0, 1254.0], [38.1, 1254.0], [38.2, 1254.0], [38.3, 1254.0], [38.4, 1254.0], [38.5, 1254.0], [38.6, 1254.0], [38.7, 1254.0], [38.8, 1254.0], [38.9, 1254.0], [39.0, 1254.0], [39.1, 1255.0], [39.2, 1255.0], [39.3, 1255.0], [39.4, 1255.0], [39.5, 1255.0], [39.6, 1255.0], [39.7, 1255.0], [39.8, 1255.0], [39.9, 1255.0], [40.0, 1255.0], [40.1, 1255.0], [40.2, 1255.0], [40.3, 1255.0], [40.4, 1255.0], [40.5, 1256.0], [40.6, 1256.0], [40.7, 1256.0], [40.8, 1256.0], [40.9, 1256.0], [41.0, 1256.0], [41.1, 1256.0], [41.2, 1256.0], [41.3, 1256.0], [41.4, 1256.0], [41.5, 1256.0], [41.6, 1256.0], [41.7, 1256.0], [41.8, 1256.0], [41.9, 1257.0], [42.0, 1257.0], [42.1, 1257.0], [42.2, 1257.0], [42.3, 1257.0], [42.4, 1257.0], [42.5, 1257.0], [42.6, 1257.0], [42.7, 1257.0], [42.8, 1257.0], [42.9, 1257.0], [43.0, 1257.0], [43.1, 1257.0], [43.2, 1257.0], [43.3, 1257.0], [43.4, 1258.0], [43.5, 1258.0], [43.6, 1258.0], [43.7, 1258.0], [43.8, 1258.0], [43.9, 1258.0], [44.0, 1258.0], [44.1, 1258.0], [44.2, 1258.0], [44.3, 1258.0], [44.4, 1258.0], [44.5, 1258.0], [44.6, 1259.0], [44.7, 1259.0], [44.8, 1259.0], [44.9, 1259.0], [45.0, 1259.0], [45.1, 1259.0], [45.2, 1259.0], [45.3, 1259.0], [45.4, 1259.0], [45.5, 1259.0], [45.6, 1259.0], [45.7, 1259.0], [45.8, 1259.0], [45.9, 1259.0], [46.0, 1259.0], [46.1, 1259.0], [46.2, 1260.0], [46.3, 1260.0], [46.4, 1260.0], [46.5, 1260.0], [46.6, 1260.0], [46.7, 1260.0], [46.8, 1260.0], [46.9, 1260.0], [47.0, 1260.0], [47.1, 1260.0], [47.2, 1260.0], [47.3, 1260.0], [47.4, 1260.0], [47.5, 1261.0], [47.6, 1261.0], [47.7, 1261.0], [47.8, 1261.0], [47.9, 1261.0], [48.0, 1261.0], [48.1, 1261.0], [48.2, 1261.0], [48.3, 1261.0], [48.4, 1261.0], [48.5, 1261.0], [48.6, 1261.0], [48.7, 1261.0], [48.8, 1261.0], [48.9, 1261.0], [49.0, 1262.0], [49.1, 1262.0], [49.2, 1262.0], [49.3, 1262.0], [49.4, 1262.0], [49.5, 1262.0], [49.6, 1262.0], [49.7, 1262.0], [49.8, 1262.0], [49.9, 1262.0], [50.0, 1262.0], [50.1, 1262.0], [50.2, 1262.0], [50.3, 1262.0], [50.4, 1262.0], [50.5, 1262.0], [50.6, 1263.0], [50.7, 1263.0], [50.8, 1263.0], [50.9, 1263.0], [51.0, 1263.0], [51.1, 1263.0], [51.2, 1263.0], [51.3, 1263.0], [51.4, 1263.0], [51.5, 1263.0], [51.6, 1263.0], [51.7, 1264.0], [51.8, 1264.0], [51.9, 1264.0], [52.0, 1264.0], [52.1, 1264.0], [52.2, 1264.0], [52.3, 1264.0], [52.4, 1264.0], [52.5, 1264.0], [52.6, 1264.0], [52.7, 1265.0], [52.8, 1265.0], [52.9, 1265.0], [53.0, 1265.0], [53.1, 1265.0], [53.2, 1265.0], [53.3, 1265.0], [53.4, 1265.0], [53.5, 1265.0], [53.6, 1265.0], [53.7, 1265.0], [53.8, 1265.0], [53.9, 1265.0], [54.0, 1266.0], [54.1, 1266.0], [54.2, 1266.0], [54.3, 1266.0], [54.4, 1266.0], [54.5, 1266.0], [54.6, 1266.0], [54.7, 1266.0], [54.8, 1266.0], [54.9, 1266.0], [55.0, 1266.0], [55.1, 1266.0], [55.2, 1266.0], [55.3, 1266.0], [55.4, 1266.0], [55.5, 1266.0], [55.6, 1267.0], [55.7, 1267.0], [55.8, 1267.0], [55.9, 1267.0], [56.0, 1267.0], [56.1, 1267.0], [56.2, 1267.0], [56.3, 1267.0], [56.4, 1267.0], [56.5, 1267.0], [56.6, 1267.0], [56.7, 1267.0], [56.8, 1268.0], [56.9, 1268.0], [57.0, 1268.0], [57.1, 1268.0], [57.2, 1268.0], [57.3, 1268.0], [57.4, 1268.0], [57.5, 1268.0], [57.6, 1268.0], [57.7, 1269.0], [57.8, 1269.0], [57.9, 1269.0], [58.0, 1269.0], [58.1, 1269.0], [58.2, 1269.0], [58.3, 1269.0], [58.4, 1269.0], [58.5, 1269.0], [58.6, 1269.0], [58.7, 1269.0], [58.8, 1269.0], [58.9, 1269.0], [59.0, 1269.0], [59.1, 1270.0], [59.2, 1270.0], [59.3, 1270.0], [59.4, 1270.0], [59.5, 1270.0], [59.6, 1270.0], [59.7, 1270.0], [59.8, 1270.0], [59.9, 1270.0], [60.0, 1270.0], [60.1, 1270.0], [60.2, 1270.0], [60.3, 1270.0], [60.4, 1270.0], [60.5, 1270.0], [60.6, 1270.0], [60.7, 1271.0], [60.8, 1271.0], [60.9, 1271.0], [61.0, 1271.0], [61.1, 1271.0], [61.2, 1271.0], [61.3, 1271.0], [61.4, 1271.0], [61.5, 1271.0], [61.6, 1271.0], [61.7, 1271.0], [61.8, 1271.0], [61.9, 1271.0], [62.0, 1271.0], [62.1, 1271.0], [62.2, 1271.0], [62.3, 1271.0], [62.4, 1271.0], [62.5, 1272.0], [62.6, 1272.0], [62.7, 1272.0], [62.8, 1272.0], [62.9, 1272.0], [63.0, 1272.0], [63.1, 1272.0], [63.2, 1272.0], [63.3, 1272.0], [63.4, 1272.0], [63.5, 1272.0], [63.6, 1272.0], [63.7, 1272.0], [63.8, 1272.0], [63.9, 1273.0], [64.0, 1273.0], [64.1, 1273.0], [64.2, 1273.0], [64.3, 1273.0], [64.4, 1273.0], [64.5, 1273.0], [64.6, 1273.0], [64.7, 1273.0], [64.8, 1273.0], [64.9, 1274.0], [65.0, 1274.0], [65.1, 1274.0], [65.2, 1274.0], [65.3, 1274.0], [65.4, 1274.0], [65.5, 1274.0], [65.6, 1274.0], [65.7, 1274.0], [65.8, 1274.0], [65.9, 1274.0], [66.0, 1274.0], [66.1, 1275.0], [66.2, 1275.0], [66.3, 1275.0], [66.4, 1275.0], [66.5, 1275.0], [66.6, 1275.0], [66.7, 1275.0], [66.8, 1275.0], [66.9, 1275.0], [67.0, 1276.0], [67.1, 1276.0], [67.2, 1276.0], [67.3, 1276.0], [67.4, 1276.0], [67.5, 1276.0], [67.6, 1276.0], [67.7, 1276.0], [67.8, 1276.0], [67.9, 1276.0], [68.0, 1276.0], [68.1, 1276.0], [68.2, 1276.0], [68.3, 1277.0], [68.4, 1277.0], [68.5, 1277.0], [68.6, 1277.0], [68.7, 1277.0], [68.8, 1277.0], [68.9, 1277.0], [69.0, 1277.0], [69.1, 1277.0], [69.2, 1277.0], [69.3, 1278.0], [69.4, 1278.0], [69.5, 1278.0], [69.6, 1278.0], [69.7, 1278.0], [69.8, 1278.0], [69.9, 1278.0], [70.0, 1278.0], [70.1, 1278.0], [70.2, 1278.0], [70.3, 1279.0], [70.4, 1279.0], [70.5, 1279.0], [70.6, 1279.0], [70.7, 1279.0], [70.8, 1279.0], [70.9, 1279.0], [71.0, 1279.0], [71.1, 1279.0], [71.2, 1279.0], [71.3, 1279.0], [71.4, 1280.0], [71.5, 1280.0], [71.6, 1280.0], [71.7, 1280.0], [71.8, 1280.0], [71.9, 1280.0], [72.0, 1280.0], [72.1, 1280.0], [72.2, 1280.0], [72.3, 1280.0], [72.4, 1280.0], [72.5, 1280.0], [72.6, 1280.0], [72.7, 1281.0], [72.8, 1281.0], [72.9, 1281.0], [73.0, 1281.0], [73.1, 1281.0], [73.2, 1281.0], [73.3, 1282.0], [73.4, 1282.0], [73.5, 1282.0], [73.6, 1282.0], [73.7, 1282.0], [73.8, 1282.0], [73.9, 1282.0], [74.0, 1282.0], [74.1, 1283.0], [74.2, 1283.0], [74.3, 1283.0], [74.4, 1283.0], [74.5, 1283.0], [74.6, 1283.0], [74.7, 1283.0], [74.8, 1283.0], [74.9, 1284.0], [75.0, 1284.0], [75.1, 1284.0], [75.2, 1284.0], [75.3, 1284.0], [75.4, 1284.0], [75.5, 1284.0], [75.6, 1284.0], [75.7, 1284.0], [75.8, 1284.0], [75.9, 1285.0], [76.0, 1285.0], [76.1, 1285.0], [76.2, 1285.0], [76.3, 1285.0], [76.4, 1285.0], [76.5, 1285.0], [76.6, 1285.0], [76.7, 1286.0], [76.8, 1286.0], [76.9, 1286.0], [77.0, 1286.0], [77.1, 1286.0], [77.2, 1286.0], [77.3, 1286.0], [77.4, 1286.0], [77.5, 1286.0], [77.6, 1286.0], [77.7, 1286.0], [77.8, 1287.0], [77.9, 1287.0], [78.0, 1287.0], [78.1, 1287.0], [78.2, 1287.0], [78.3, 1287.0], [78.4, 1287.0], [78.5, 1287.0], [78.6, 1287.0], [78.7, 1287.0], [78.8, 1287.0], [78.9, 1288.0], [79.0, 1288.0], [79.1, 1288.0], [79.2, 1288.0], [79.3, 1288.0], [79.4, 1288.0], [79.5, 1288.0], [79.6, 1288.0], [79.7, 1288.0], [79.8, 1289.0], [79.9, 1289.0], [80.0, 1289.0], [80.1, 1289.0], [80.2, 1289.0], [80.3, 1289.0], [80.4, 1289.0], [80.5, 1289.0], [80.6, 1290.0], [80.7, 1290.0], [80.8, 1290.0], [80.9, 1290.0], [81.0, 1290.0], [81.1, 1290.0], [81.2, 1290.0], [81.3, 1291.0], [81.4, 1291.0], [81.5, 1291.0], [81.6, 1291.0], [81.7, 1291.0], [81.8, 1291.0], [81.9, 1292.0], [82.0, 1292.0], [82.1, 1292.0], [82.2, 1292.0], [82.3, 1293.0], [82.4, 1293.0], [82.5, 1293.0], [82.6, 1293.0], [82.7, 1293.0], [82.8, 1294.0], [82.9, 1294.0], [83.0, 1294.0], [83.1, 1294.0], [83.2, 1294.0], [83.3, 1295.0], [83.4, 1295.0], [83.5, 1295.0], [83.6, 1295.0], [83.7, 1295.0], [83.8, 1296.0], [83.9, 1296.0], [84.0, 1296.0], [84.1, 1296.0], [84.2, 1297.0], [84.3, 1297.0], [84.4, 1297.0], [84.5, 1298.0], [84.6, 1298.0], [84.7, 1298.0], [84.8, 1298.0], [84.9, 1299.0], [85.0, 1299.0], [85.1, 1299.0], [85.2, 1299.0], [85.3, 1299.0], [85.4, 1299.0], [85.5, 1300.0], [85.6, 1300.0], [85.7, 1300.0], [85.8, 1300.0], [85.9, 1300.0], [86.0, 1301.0], [86.1, 1301.0], [86.2, 1301.0], [86.3, 1301.0], [86.4, 1301.0], [86.5, 1302.0], [86.6, 1302.0], [86.7, 1302.0], [86.8, 1302.0], [86.9, 1303.0], [87.0, 1303.0], [87.1, 1304.0], [87.2, 1304.0], [87.3, 1305.0], [87.4, 1305.0], [87.5, 1305.0], [87.6, 1305.0], [87.7, 1305.0], [87.8, 1306.0], [87.9, 1306.0], [88.0, 1306.0], [88.1, 1307.0], [88.2, 1307.0], [88.3, 1307.0], [88.4, 1308.0], [88.5, 1308.0], [88.6, 1308.0], [88.7, 1308.0], [88.8, 1309.0], [88.9, 1309.0], [89.0, 1310.0], [89.1, 1310.0], [89.2, 1310.0], [89.3, 1311.0], [89.4, 1311.0], [89.5, 1312.0], [89.6, 1313.0], [89.7, 1313.0], [89.8, 1314.0], [89.9, 1314.0], [90.0, 1315.0], [90.1, 1316.0], [90.2, 1316.0], [90.3, 1317.0], [90.4, 1318.0], [90.5, 1318.0], [90.6, 1319.0], [90.7, 1320.0], [90.8, 1322.0], [90.9, 1323.0], [91.0, 1324.0], [91.1, 1325.0], [91.2, 1326.0], [91.3, 1327.0], [91.4, 1328.0], [91.5, 1329.0], [91.6, 1331.0], [91.7, 1331.0], [91.8, 1333.0], [91.9, 1333.0], [92.0, 1334.0], [92.1, 1334.0], [92.2, 1335.0], [92.3, 1339.0], [92.4, 1340.0], [92.5, 1342.0], [92.6, 1344.0], [92.7, 1346.0], [92.8, 1348.0], [92.9, 1350.0], [93.0, 1350.0], [93.1, 1353.0], [93.2, 1356.0], [93.3, 1361.0], [93.4, 1363.0], [93.5, 1365.0], [93.6, 1369.0], [93.7, 1375.0], [93.8, 1379.0], [93.9, 1379.0], [94.0, 1384.0], [94.1, 1392.0], [94.2, 1393.0], [94.3, 1399.0], [94.4, 1401.0], [94.5, 1402.0], [94.6, 1408.0], [94.7, 1417.0], [94.8, 1422.0], [94.9, 1426.0], [95.0, 1432.0], [95.1, 1438.0], [95.2, 1442.0], [95.3, 1445.0], [95.4, 1448.0], [95.5, 1451.0], [95.6, 1458.0], [95.7, 1469.0], [95.8, 1479.0], [95.9, 1483.0], [96.0, 1484.0], [96.1, 1493.0], [96.2, 1496.0], [96.3, 1497.0], [96.4, 1500.0], [96.5, 1517.0], [96.6, 1527.0], [96.7, 1532.0], [96.8, 1541.0], [96.9, 1549.0], [97.0, 1554.0], [97.1, 1556.0], [97.2, 1560.0], [97.3, 1576.0], [97.4, 1594.0], [97.5, 1605.0], [97.6, 1626.0], [97.7, 1637.0], [97.8, 1652.0], [97.9, 1671.0], [98.0, 1691.0], [98.1, 1709.0], [98.2, 1727.0], [98.3, 1893.0], [98.4, 1958.0], [98.5, 2032.0], [98.6, 2080.0], [98.7, 2196.0], [98.8, 2257.0], [98.9, 2276.0], [99.0, 2281.0], [99.1, 2405.0], [99.2, 2603.0], [99.3, 2892.0], [99.4, 3252.0], [99.5, 3400.0], [99.6, 4248.0], [99.7, 4350.0], [99.8, 5237.0], [99.9, 5273.0], [100.0, 9249.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[0.0, 295.0], [0.1, 297.0], [0.2, 297.0], [0.3, 298.0], [0.4, 299.0], [0.5, 299.0], [0.6, 299.0], [0.7, 300.0], [0.8, 300.0], [0.9, 300.0], [1.0, 301.0], [1.1, 301.0], [1.2, 301.0], [1.3, 301.0], [1.4, 301.0], [1.5, 302.0], [1.6, 302.0], [1.7, 302.0], [1.8, 302.0], [1.9, 302.0], [2.0, 302.0], [2.1, 302.0], [2.2, 302.0], [2.3, 302.0], [2.4, 302.0], [2.5, 302.0], [2.6, 303.0], [2.7, 303.0], [2.8, 303.0], [2.9, 303.0], [3.0, 303.0], [3.1, 303.0], [3.2, 303.0], [3.3, 303.0], [3.4, 303.0], [3.5, 303.0], [3.6, 303.0], [3.7, 303.0], [3.8, 303.0], [3.9, 303.0], [4.0, 304.0], [4.1, 304.0], [4.2, 304.0], [4.3, 304.0], [4.4, 304.0], [4.5, 304.0], [4.6, 304.0], [4.7, 304.0], [4.8, 304.0], [4.9, 304.0], [5.0, 304.0], [5.1, 304.0], [5.2, 304.0], [5.3, 304.0], [5.4, 304.0], [5.5, 304.0], [5.6, 304.0], [5.7, 304.0], [5.8, 304.0], [5.9, 304.0], [6.0, 304.0], [6.1, 304.0], [6.2, 304.0], [6.3, 304.0], [6.4, 304.0], [6.5, 304.0], [6.6, 304.0], [6.7, 305.0], [6.8, 305.0], [6.9, 305.0], [7.0, 305.0], [7.1, 305.0], [7.2, 305.0], [7.3, 305.0], [7.4, 305.0], [7.5, 305.0], [7.6, 305.0], [7.7, 305.0], [7.8, 305.0], [7.9, 305.0], [8.0, 305.0], [8.1, 305.0], [8.2, 305.0], [8.3, 305.0], [8.4, 305.0], [8.5, 305.0], [8.6, 305.0], [8.7, 305.0], [8.8, 305.0], [8.9, 305.0], [9.0, 305.0], [9.1, 305.0], [9.2, 305.0], [9.3, 305.0], [9.4, 305.0], [9.5, 306.0], [9.6, 306.0], [9.7, 306.0], [9.8, 306.0], [9.9, 306.0], [10.0, 306.0], [10.1, 306.0], [10.2, 306.0], [10.3, 306.0], [10.4, 306.0], [10.5, 306.0], [10.6, 306.0], [10.7, 306.0], [10.8, 306.0], [10.9, 306.0], [11.0, 306.0], [11.1, 306.0], [11.2, 306.0], [11.3, 306.0], [11.4, 306.0], [11.5, 306.0], [11.6, 306.0], [11.7, 306.0], [11.8, 306.0], [11.9, 306.0], [12.0, 306.0], [12.1, 306.0], [12.2, 306.0], [12.3, 306.0], [12.4, 306.0], [12.5, 306.0], [12.6, 306.0], [12.7, 306.0], [12.8, 306.0], [12.9, 307.0], [13.0, 307.0], [13.1, 307.0], [13.2, 307.0], [13.3, 307.0], [13.4, 307.0], [13.5, 307.0], [13.6, 307.0], [13.7, 307.0], [13.8, 307.0], [13.9, 307.0], [14.0, 307.0], [14.1, 307.0], [14.2, 307.0], [14.3, 307.0], [14.4, 307.0], [14.5, 307.0], [14.6, 307.0], [14.7, 307.0], [14.8, 307.0], [14.9, 307.0], [15.0, 307.0], [15.1, 307.0], [15.2, 307.0], [15.3, 307.0], [15.4, 307.0], [15.5, 307.0], [15.6, 307.0], [15.7, 307.0], [15.8, 307.0], [15.9, 307.0], [16.0, 307.0], [16.1, 307.0], [16.2, 307.0], [16.3, 308.0], [16.4, 308.0], [16.5, 308.0], [16.6, 308.0], [16.7, 308.0], [16.8, 308.0], [16.9, 308.0], [17.0, 308.0], [17.1, 308.0], [17.2, 308.0], [17.3, 308.0], [17.4, 308.0], [17.5, 308.0], [17.6, 308.0], [17.7, 308.0], [17.8, 308.0], [17.9, 308.0], [18.0, 308.0], [18.1, 308.0], [18.2, 308.0], [18.3, 308.0], [18.4, 308.0], [18.5, 308.0], [18.6, 308.0], [18.7, 308.0], [18.8, 308.0], [18.9, 308.0], [19.0, 308.0], [19.1, 308.0], [19.2, 308.0], [19.3, 308.0], [19.4, 308.0], [19.5, 308.0], [19.6, 308.0], [19.7, 308.0], [19.8, 308.0], [19.9, 308.0], [20.0, 309.0], [20.1, 309.0], [20.2, 309.0], [20.3, 309.0], [20.4, 309.0], [20.5, 309.0], [20.6, 309.0], [20.7, 309.0], [20.8, 309.0], [20.9, 309.0], [21.0, 309.0], [21.1, 309.0], [21.2, 309.0], [21.3, 309.0], [21.4, 309.0], [21.5, 309.0], [21.6, 309.0], [21.7, 309.0], [21.8, 309.0], [21.9, 309.0], [22.0, 309.0], [22.1, 309.0], [22.2, 309.0], [22.3, 309.0], [22.4, 309.0], [22.5, 309.0], [22.6, 309.0], [22.7, 309.0], [22.8, 309.0], [22.9, 309.0], [23.0, 309.0], [23.1, 309.0], [23.2, 309.0], [23.3, 309.0], [23.4, 309.0], [23.5, 309.0], [23.6, 309.0], [23.7, 309.0], [23.8, 309.0], [23.9, 309.0], [24.0, 309.0], [24.1, 309.0], [24.2, 309.0], [24.3, 309.0], [24.4, 309.0], [24.5, 309.0], [24.6, 309.0], [24.7, 310.0], [24.8, 310.0], [24.9, 310.0], [25.0, 310.0], [25.1, 310.0], [25.2, 310.0], [25.3, 310.0], [25.4, 310.0], [25.5, 310.0], [25.6, 310.0], [25.7, 310.0], [25.8, 310.0], [25.9, 310.0], [26.0, 310.0], [26.1, 310.0], [26.2, 310.0], [26.3, 310.0], [26.4, 310.0], [26.5, 310.0], [26.6, 310.0], [26.7, 310.0], [26.8, 310.0], [26.9, 310.0], [27.0, 310.0], [27.1, 310.0], [27.2, 310.0], [27.3, 310.0], [27.4, 310.0], [27.5, 310.0], [27.6, 310.0], [27.7, 310.0], [27.8, 310.0], [27.9, 310.0], [28.0, 310.0], [28.1, 310.0], [28.2, 310.0], [28.3, 310.0], [28.4, 310.0], [28.5, 310.0], [28.6, 310.0], [28.7, 310.0], [28.8, 310.0], [28.9, 310.0], [29.0, 310.0], [29.1, 310.0], [29.2, 310.0], [29.3, 310.0], [29.4, 310.0], [29.5, 310.0], [29.6, 310.0], [29.7, 310.0], [29.8, 310.0], [29.9, 310.0], [30.0, 310.0], [30.1, 311.0], [30.2, 311.0], [30.3, 311.0], [30.4, 311.0], [30.5, 311.0], [30.6, 311.0], [30.7, 311.0], [30.8, 311.0], [30.9, 311.0], [31.0, 311.0], [31.1, 311.0], [31.2, 311.0], [31.3, 311.0], [31.4, 311.0], [31.5, 311.0], [31.6, 311.0], [31.7, 311.0], [31.8, 311.0], [31.9, 311.0], [32.0, 311.0], [32.1, 311.0], [32.2, 311.0], [32.3, 311.0], [32.4, 311.0], [32.5, 311.0], [32.6, 311.0], [32.7, 311.0], [32.8, 311.0], [32.9, 311.0], [33.0, 311.0], [33.1, 311.0], [33.2, 311.0], [33.3, 311.0], [33.4, 311.0], [33.5, 311.0], [33.6, 311.0], [33.7, 311.0], [33.8, 311.0], [33.9, 311.0], [34.0, 311.0], [34.1, 311.0], [34.2, 311.0], [34.3, 311.0], [34.4, 311.0], [34.5, 311.0], [34.6, 311.0], [34.7, 311.0], [34.8, 311.0], [34.9, 311.0], [35.0, 311.0], [35.1, 311.0], [35.2, 311.0], [35.3, 311.0], [35.4, 311.0], [35.5, 311.0], [35.6, 311.0], [35.7, 311.0], [35.8, 311.0], [35.9, 311.0], [36.0, 311.0], [36.1, 312.0], [36.2, 312.0], [36.3, 312.0], [36.4, 312.0], [36.5, 312.0], [36.6, 312.0], [36.7, 312.0], [36.8, 312.0], [36.9, 312.0], [37.0, 312.0], [37.1, 312.0], [37.2, 312.0], [37.3, 312.0], [37.4, 312.0], [37.5, 312.0], [37.6, 312.0], [37.7, 312.0], [37.8, 312.0], [37.9, 312.0], [38.0, 312.0], [38.1, 312.0], [38.2, 312.0], [38.3, 312.0], [38.4, 312.0], [38.5, 312.0], [38.6, 312.0], [38.7, 312.0], [38.8, 312.0], [38.9, 312.0], [39.0, 312.0], [39.1, 312.0], [39.2, 312.0], [39.3, 312.0], [39.4, 312.0], [39.5, 312.0], [39.6, 312.0], [39.7, 312.0], [39.8, 312.0], [39.9, 312.0], [40.0, 312.0], [40.1, 312.0], [40.2, 312.0], [40.3, 312.0], [40.4, 312.0], [40.5, 312.0], [40.6, 312.0], [40.7, 312.0], [40.8, 312.0], [40.9, 312.0], [41.0, 312.0], [41.1, 312.0], [41.2, 312.0], [41.3, 312.0], [41.4, 312.0], [41.5, 312.0], [41.6, 312.0], [41.7, 312.0], [41.8, 312.0], [41.9, 312.0], [42.0, 312.0], [42.1, 312.0], [42.2, 312.0], [42.3, 313.0], [42.4, 313.0], [42.5, 313.0], [42.6, 313.0], [42.7, 313.0], [42.8, 313.0], [42.9, 313.0], [43.0, 313.0], [43.1, 313.0], [43.2, 313.0], [43.3, 313.0], [43.4, 313.0], [43.5, 313.0], [43.6, 313.0], [43.7, 313.0], [43.8, 313.0], [43.9, 313.0], [44.0, 313.0], [44.1, 313.0], [44.2, 313.0], [44.3, 313.0], [44.4, 313.0], [44.5, 313.0], [44.6, 313.0], [44.7, 313.0], [44.8, 313.0], [44.9, 313.0], [45.0, 313.0], [45.1, 313.0], [45.2, 313.0], [45.3, 313.0], [45.4, 313.0], [45.5, 313.0], [45.6, 313.0], [45.7, 313.0], [45.8, 313.0], [45.9, 313.0], [46.0, 313.0], [46.1, 313.0], [46.2, 313.0], [46.3, 313.0], [46.4, 313.0], [46.5, 313.0], [46.6, 313.0], [46.7, 313.0], [46.8, 313.0], [46.9, 313.0], [47.0, 313.0], [47.1, 313.0], [47.2, 313.0], [47.3, 313.0], [47.4, 313.0], [47.5, 313.0], [47.6, 314.0], [47.7, 314.0], [47.8, 314.0], [47.9, 314.0], [48.0, 314.0], [48.1, 314.0], [48.2, 314.0], [48.3, 314.0], [48.4, 314.0], [48.5, 314.0], [48.6, 314.0], [48.7, 314.0], [48.8, 314.0], [48.9, 314.0], [49.0, 314.0], [49.1, 314.0], [49.2, 314.0], [49.3, 314.0], [49.4, 314.0], [49.5, 314.0], [49.6, 314.0], [49.7, 314.0], [49.8, 314.0], [49.9, 314.0], [50.0, 314.0], [50.1, 314.0], [50.2, 314.0], [50.3, 314.0], [50.4, 314.0], [50.5, 314.0], [50.6, 314.0], [50.7, 314.0], [50.8, 314.0], [50.9, 314.0], [51.0, 314.0], [51.1, 314.0], [51.2, 314.0], [51.3, 314.0], [51.4, 314.0], [51.5, 314.0], [51.6, 314.0], [51.7, 314.0], [51.8, 314.0], [51.9, 314.0], [52.0, 314.0], [52.1, 314.0], [52.2, 314.0], [52.3, 314.0], [52.4, 314.0], [52.5, 314.0], [52.6, 314.0], [52.7, 314.0], [52.8, 314.0], [52.9, 315.0], [53.0, 315.0], [53.1, 315.0], [53.2, 315.0], [53.3, 315.0], [53.4, 315.0], [53.5, 315.0], [53.6, 315.0], [53.7, 315.0], [53.8, 315.0], [53.9, 315.0], [54.0, 315.0], [54.1, 315.0], [54.2, 315.0], [54.3, 315.0], [54.4, 315.0], [54.5, 315.0], [54.6, 315.0], [54.7, 315.0], [54.8, 315.0], [54.9, 315.0], [55.0, 315.0], [55.1, 315.0], [55.2, 315.0], [55.3, 315.0], [55.4, 315.0], [55.5, 315.0], [55.6, 315.0], [55.7, 315.0], [55.8, 315.0], [55.9, 315.0], [56.0, 315.0], [56.1, 315.0], [56.2, 315.0], [56.3, 315.0], [56.4, 315.0], [56.5, 315.0], [56.6, 315.0], [56.7, 315.0], [56.8, 315.0], [56.9, 315.0], [57.0, 315.0], [57.1, 315.0], [57.2, 315.0], [57.3, 315.0], [57.4, 315.0], [57.5, 315.0], [57.6, 315.0], [57.7, 315.0], [57.8, 315.0], [57.9, 315.0], [58.0, 315.0], [58.1, 315.0], [58.2, 315.0], [58.3, 316.0], [58.4, 316.0], [58.5, 316.0], [58.6, 316.0], [58.7, 316.0], [58.8, 316.0], [58.9, 316.0], [59.0, 316.0], [59.1, 316.0], [59.2, 316.0], [59.3, 316.0], [59.4, 316.0], [59.5, 316.0], [59.6, 316.0], [59.7, 316.0], [59.8, 316.0], [59.9, 316.0], [60.0, 316.0], [60.1, 316.0], [60.2, 316.0], [60.3, 316.0], [60.4, 316.0], [60.5, 316.0], [60.6, 316.0], [60.7, 316.0], [60.8, 316.0], [60.9, 316.0], [61.0, 316.0], [61.1, 316.0], [61.2, 316.0], [61.3, 316.0], [61.4, 316.0], [61.5, 316.0], [61.6, 316.0], [61.7, 316.0], [61.8, 316.0], [61.9, 316.0], [62.0, 316.0], [62.1, 316.0], [62.2, 316.0], [62.3, 316.0], [62.4, 316.0], [62.5, 316.0], [62.6, 316.0], [62.7, 316.0], [62.8, 316.0], [62.9, 316.0], [63.0, 316.0], [63.1, 317.0], [63.2, 317.0], [63.3, 317.0], [63.4, 317.0], [63.5, 317.0], [63.6, 317.0], [63.7, 317.0], [63.8, 317.0], [63.9, 317.0], [64.0, 317.0], [64.1, 317.0], [64.2, 317.0], [64.3, 317.0], [64.4, 317.0], [64.5, 317.0], [64.6, 317.0], [64.7, 317.0], [64.8, 317.0], [64.9, 317.0], [65.0, 317.0], [65.1, 317.0], [65.2, 317.0], [65.3, 317.0], [65.4, 317.0], [65.5, 317.0], [65.6, 317.0], [65.7, 317.0], [65.8, 317.0], [65.9, 317.0], [66.0, 317.0], [66.1, 317.0], [66.2, 317.0], [66.3, 317.0], [66.4, 317.0], [66.5, 317.0], [66.6, 317.0], [66.7, 317.0], [66.8, 317.0], [66.9, 317.0], [67.0, 317.0], [67.1, 317.0], [67.2, 317.0], [67.3, 317.0], [67.4, 317.0], [67.5, 317.0], [67.6, 318.0], [67.7, 318.0], [67.8, 318.0], [67.9, 318.0], [68.0, 318.0], [68.1, 318.0], [68.2, 318.0], [68.3, 318.0], [68.4, 318.0], [68.5, 318.0], [68.6, 318.0], [68.7, 318.0], [68.8, 318.0], [68.9, 318.0], [69.0, 318.0], [69.1, 318.0], [69.2, 318.0], [69.3, 318.0], [69.4, 318.0], [69.5, 318.0], [69.6, 318.0], [69.7, 318.0], [69.8, 318.0], [69.9, 318.0], [70.0, 318.0], [70.1, 318.0], [70.2, 318.0], [70.3, 318.0], [70.4, 318.0], [70.5, 318.0], [70.6, 318.0], [70.7, 318.0], [70.8, 318.0], [70.9, 318.0], [71.0, 318.0], [71.1, 318.0], [71.2, 318.0], [71.3, 318.0], [71.4, 318.0], [71.5, 318.0], [71.6, 318.0], [71.7, 318.0], [71.8, 318.0], [71.9, 318.0], [72.0, 318.0], [72.1, 319.0], [72.2, 319.0], [72.3, 319.0], [72.4, 319.0], [72.5, 319.0], [72.6, 319.0], [72.7, 319.0], [72.8, 319.0], [72.9, 319.0], [73.0, 319.0], [73.1, 319.0], [73.2, 319.0], [73.3, 319.0], [73.4, 319.0], [73.5, 319.0], [73.6, 319.0], [73.7, 319.0], [73.8, 319.0], [73.9, 319.0], [74.0, 319.0], [74.1, 319.0], [74.2, 319.0], [74.3, 319.0], [74.4, 319.0], [74.5, 319.0], [74.6, 319.0], [74.7, 319.0], [74.8, 319.0], [74.9, 319.0], [75.0, 319.0], [75.1, 319.0], [75.2, 319.0], [75.3, 320.0], [75.4, 320.0], [75.5, 320.0], [75.6, 320.0], [75.7, 320.0], [75.8, 320.0], [75.9, 320.0], [76.0, 320.0], [76.1, 320.0], [76.2, 320.0], [76.3, 320.0], [76.4, 320.0], [76.5, 320.0], [76.6, 320.0], [76.7, 320.0], [76.8, 320.0], [76.9, 320.0], [77.0, 320.0], [77.1, 320.0], [77.2, 320.0], [77.3, 320.0], [77.4, 320.0], [77.5, 320.0], [77.6, 320.0], [77.7, 320.0], [77.8, 320.0], [77.9, 320.0], [78.0, 320.0], [78.1, 320.0], [78.2, 320.0], [78.3, 320.0], [78.4, 321.0], [78.5, 321.0], [78.6, 321.0], [78.7, 321.0], [78.8, 321.0], [78.9, 321.0], [79.0, 321.0], [79.1, 321.0], [79.2, 321.0], [79.3, 321.0], [79.4, 321.0], [79.5, 321.0], [79.6, 321.0], [79.7, 321.0], [79.8, 321.0], [79.9, 321.0], [80.0, 321.0], [80.1, 321.0], [80.2, 321.0], [80.3, 321.0], [80.4, 321.0], [80.5, 321.0], [80.6, 321.0], [80.7, 321.0], [80.8, 321.0], [80.9, 321.0], [81.0, 321.0], [81.1, 321.0], [81.2, 321.0], [81.3, 321.0], [81.4, 322.0], [81.5, 322.0], [81.6, 322.0], [81.7, 322.0], [81.8, 322.0], [81.9, 322.0], [82.0, 322.0], [82.1, 322.0], [82.2, 322.0], [82.3, 322.0], [82.4, 322.0], [82.5, 322.0], [82.6, 322.0], [82.7, 322.0], [82.8, 322.0], [82.9, 322.0], [83.0, 322.0], [83.1, 322.0], [83.2, 322.0], [83.3, 322.0], [83.4, 323.0], [83.5, 323.0], [83.6, 323.0], [83.7, 323.0], [83.8, 323.0], [83.9, 323.0], [84.0, 323.0], [84.1, 323.0], [84.2, 323.0], [84.3, 323.0], [84.4, 323.0], [84.5, 323.0], [84.6, 323.0], [84.7, 323.0], [84.8, 323.0], [84.9, 323.0], [85.0, 323.0], [85.1, 323.0], [85.2, 323.0], [85.3, 324.0], [85.4, 324.0], [85.5, 324.0], [85.6, 324.0], [85.7, 324.0], [85.8, 324.0], [85.9, 324.0], [86.0, 324.0], [86.1, 324.0], [86.2, 324.0], [86.3, 324.0], [86.4, 324.0], [86.5, 324.0], [86.6, 324.0], [86.7, 324.0], [86.8, 324.0], [86.9, 325.0], [87.0, 325.0], [87.1, 325.0], [87.2, 325.0], [87.3, 325.0], [87.4, 325.0], [87.5, 325.0], [87.6, 325.0], [87.7, 325.0], [87.8, 325.0], [87.9, 325.0], [88.0, 326.0], [88.1, 326.0], [88.2, 326.0], [88.3, 326.0], [88.4, 326.0], [88.5, 326.0], [88.6, 326.0], [88.7, 326.0], [88.8, 326.0], [88.9, 326.0], [89.0, 327.0], [89.1, 327.0], [89.2, 327.0], [89.3, 327.0], [89.4, 328.0], [89.5, 328.0], [89.6, 328.0], [89.7, 328.0], [89.8, 328.0], [89.9, 328.0], [90.0, 329.0], [90.1, 329.0], [90.2, 329.0], [90.3, 329.0], [90.4, 329.0], [90.5, 330.0], [90.6, 330.0], [90.7, 330.0], [90.8, 330.0], [90.9, 330.0], [91.0, 330.0], [91.1, 331.0], [91.2, 331.0], [91.3, 331.0], [91.4, 331.0], [91.5, 331.0], [91.6, 332.0], [91.7, 332.0], [91.8, 332.0], [91.9, 333.0], [92.0, 333.0], [92.1, 333.0], [92.2, 334.0], [92.3, 334.0], [92.4, 334.0], [92.5, 334.0], [92.6, 335.0], [92.7, 335.0], [92.8, 335.0], [92.9, 336.0], [93.0, 336.0], [93.1, 336.0], [93.2, 336.0], [93.3, 337.0], [93.4, 337.0], [93.5, 337.0], [93.6, 337.0], [93.7, 337.0], [93.8, 338.0], [93.9, 338.0], [94.0, 339.0], [94.1, 339.0], [94.2, 340.0], [94.3, 340.0], [94.4, 340.0], [94.5, 341.0], [94.6, 341.0], [94.7, 341.0], [94.8, 342.0], [94.9, 342.0], [95.0, 343.0], [95.1, 343.0], [95.2, 343.0], [95.3, 344.0], [95.4, 344.0], [95.5, 345.0], [95.6, 345.0], [95.7, 345.0], [95.8, 346.0], [95.9, 346.0], [96.0, 347.0], [96.1, 348.0], [96.2, 349.0], [96.3, 350.0], [96.4, 350.0], [96.5, 351.0], [96.6, 351.0], [96.7, 352.0], [96.8, 353.0], [96.9, 354.0], [97.0, 355.0], [97.1, 356.0], [97.2, 356.0], [97.3, 357.0], [97.4, 358.0], [97.5, 359.0], [97.6, 364.0], [97.7, 369.0], [97.8, 369.0], [97.9, 373.0], [98.0, 375.0], [98.1, 377.0], [98.2, 380.0], [98.3, 384.0], [98.4, 387.0], [98.5, 390.0], [98.6, 396.0], [98.7, 401.0], [98.8, 405.0], [98.9, 409.0], [99.0, 417.0], [99.1, 427.0], [99.2, 432.0], [99.3, 452.0], [99.4, 503.0], [99.5, 654.0], [99.6, 1062.0], [99.7, 2307.0], [99.8, 3313.0], [99.9, 4317.0], [100.0, 6328.0]], "isOverall": false, "label": "Search Booking", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 3332.0, "series": [{"data": [[4300.0, 6.0], [1100.0, 3.0], [2300.0, 2.0], [300.0, 3325.0], [1200.0, 2.0], [6300.0, 1.0], [400.0, 29.0], [200.0, 28.0], [3300.0, 4.0]], "isOverall": false, "label": "Create Booking", "isController": false}, {"data": [[9200.0, 1.0], [1100.0, 10.0], [1200.0, 2895.0], [1300.0, 302.0], [1400.0, 69.0], [1500.0, 37.0], [1600.0, 19.0], [1700.0, 9.0], [1800.0, 2.0], [1900.0, 4.0], [2000.0, 7.0], [2100.0, 2.0], [2200.0, 10.0], [2300.0, 3.0], [2400.0, 2.0], [2500.0, 1.0], [2600.0, 3.0], [2800.0, 2.0], [3100.0, 1.0], [3200.0, 4.0], [3400.0, 2.0], [3500.0, 1.0], [4200.0, 4.0], [4300.0, 2.0], [5200.0, 6.0], [7400.0, 2.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[2300.0, 4.0], [600.0, 2.0], [3300.0, 2.0], [200.0, 21.0], [1000.0, 3.0], [4300.0, 2.0], [1100.0, 1.0], [300.0, 3332.0], [1200.0, 1.0], [5300.0, 1.0], [6300.0, 2.0], [400.0, 26.0], [500.0, 3.0]], "isOverall": false, "label": "Search Booking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 9200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 13.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 6761.0, "series": [{"data": [[0.0, 6761.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 3293.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 133.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 13.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 6.75, "minX": 1.75122918E12, "maxY": 13.93729372937294, "series": [{"data": [[1.75123086E12, 13.93729372937294], [1.75123104E12, 12.039344262295087], [1.75122924E12, 12.02999999999999], [1.75122954E12, 12.312903225806451], [1.75122984E12, 12.480132450331125], [1.75123014E12, 12.357377049180329], [1.75123044E12, 12.224025974025968], [1.75123074E12, 12.009646302250806], [1.75123116E12, 12.94498381877023], [1.75123038E12, 12.279605263157896], [1.75123068E12, 11.260726072607257], [1.75122936E12, 12.158576051779928], [1.75122966E12, 11.836601307189543], [1.75122996E12, 11.967426710097724], [1.75123098E12, 11.916932907348238], [1.75123026E12, 11.803858520900318], [1.75123056E12, 12.06270627062706], [1.7512299E12, 11.50326797385621], [1.7512302E12, 13.74509803921569], [1.7512305E12, 11.726384364820841], [1.7512308E12, 11.66666666666667], [1.7512311E12, 11.855263157894733], [1.75122918E12, 6.75], [1.75122948E12, 11.586440677966108], [1.75122978E12, 12.149350649350652], [1.75123008E12, 11.853820598006637], [1.75122942E12, 11.958466453674124], [1.75122972E12, 11.82084690553746], [1.75123122E12, 10.156250000000002], [1.75123002E12, 11.647435897435898], [1.75123032E12, 11.407284768211921], [1.75123062E12, 12.206451612903228], [1.75123092E12, 11.91856677524429], [1.7512293E12, 12.016447368421053], [1.7512296E12, 12.797385620915032]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75123122E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 309.0, "minX": 1.0, "maxY": 4274.571428571428, "series": [{"data": [[8.0, 311.0833333333333], [9.0, 314.84745762711856], [10.0, 315.6193181818181], [11.0, 316.57720057720053], [12.0, 316.3020063357978], [13.0, 317.56806282722533], [14.0, 319.0771349862261], [15.0, 318.81707317073165], [16.0, 482.26666666666665], [4.0, 315.0], [1.0, 309.0], [17.0, 312.5], [18.0, 890.2222222222223], [19.0, 332.3333333333333], [20.0, 1690.0], [21.0, 3065.75], [22.0, 3315.2], [7.0, 310.75]], "isOverall": false, "label": "Create Booking", "isController": false}, {"data": [[12.069705882352958, 330.722647058824]], "isOverall": false, "label": "Create Booking-Aggregated", "isController": false}, {"data": [[8.0, 1311.1000000000004], [9.0, 1282.4836601307188], [10.0, 1273.4358974358972], [11.0, 1276.7859872611466], [12.0, 1294.1344262295079], [13.0, 1286.8372093023258], [14.0, 1288.0598006644527], [15.0, 1377.9230769230771], [16.0, 1566.3200000000002], [4.0, 1244.0], [17.0, 1280.8], [18.0, 2937.3333333333335], [19.0, 2694.2], [20.0, 2839.5833333333335], [21.0, 4274.571428571428], [22.0, 3258.3333333333335], [6.0, 2078.0], [7.0, 1255.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[11.882647058823553, 1306.3920588235287]], "isOverall": false, "label": "Login-Aggregated", "isController": false}, {"data": [[8.0, 313.44444444444446], [2.0, 310.0], [9.0, 316.1285714285713], [10.0, 317.33101045296166], [11.0, 319.76848874598033], [12.0, 317.057797164667], [3.0, 326.0], [13.0, 317.2702050663449], [14.0, 320.78076062639843], [15.0, 331.6758620689654], [16.0, 326.969696969697], [4.0, 319.0], [1.0, 310.0], [17.0, 568.625], [18.0, 363.24999999999994], [19.0, 2564.5], [20.0, 2116.4], [5.0, 321.0], [21.0, 1649.3333333333333], [22.0, 3816.5], [23.0, 2312.0], [6.0, 310.0], [7.0, 312.0]], "isOverall": false, "label": "Search Booking", "isController": false}, {"data": [[12.303823529411767, 329.7926470588235]], "isOverall": false, "label": "Search Booking-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 23.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 19.066666666666666, "minX": 1.75122918E12, "maxY": 4486.583333333333, "series": [{"data": [[1.75123086E12, 4358.983333333334], [1.75123104E12, 4376.516666666666], [1.75122924E12, 4293.7], [1.75122954E12, 4446.966666666666], [1.75122984E12, 4323.383333333333], [1.75123014E12, 4371.0], [1.75123044E12, 4417.116666666667], [1.75123074E12, 4457.616666666667], [1.75123116E12, 4432.683333333333], [1.75123038E12, 4349.816666666667], [1.75123068E12, 4333.9], [1.75122936E12, 4431.166666666667], [1.75122966E12, 4381.85], [1.75122996E12, 4398.433333333333], [1.75123098E12, 4486.583333333333], [1.75123026E12, 4457.416666666667], [1.75123056E12, 4338.7], [1.7512299E12, 4389.633333333333], [1.7512302E12, 4372.983333333334], [1.7512305E12, 4394.966666666666], [1.7512308E12, 4342.466666666666], [1.7512311E12, 4351.8], [1.75122918E12, 51.06666666666667], [1.75122948E12, 4229.383333333333], [1.75122978E12, 4413.666666666667], [1.75123008E12, 4306.533333333334], [1.75122942E12, 4483.45], [1.75122972E12, 4396.516666666666], [1.75123122E12, 1380.1666666666667], [1.75123002E12, 4471.05], [1.75123032E12, 4329.2], [1.75123062E12, 4439.566666666667], [1.75123092E12, 4393.016666666666], [1.7512293E12, 4355.566666666667], [1.7512296E12, 4374.466666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75123086E12, 1559.1666666666667], [1.75123104E12, 1569.4], [1.75122924E12, 1553.1666666666667], [1.75122954E12, 1604.3], [1.75122984E12, 1552.8166666666666], [1.75123014E12, 1575.4], [1.75123044E12, 1594.6166666666666], [1.75123074E12, 1605.0333333333333], [1.75123116E12, 1596.9666666666667], [1.75123038E12, 1563.35], [1.75123068E12, 1560.95], [1.75122936E12, 1592.7166666666667], [1.75122966E12, 1574.9166666666667], [1.75122996E12, 1586.3333333333333], [1.75123098E12, 1618.2166666666667], [1.75123026E12, 1599.3166666666666], [1.75123056E12, 1564.2], [1.7512299E12, 1580.7833333333333], [1.7512302E12, 1576.5833333333333], [1.7512305E12, 1580.0333333333333], [1.7512308E12, 1561.4333333333334], [1.7512311E12, 1568.9333333333334], [1.75122918E12, 19.066666666666666], [1.75122948E12, 1517.8666666666666], [1.75122978E12, 1589.6], [1.75123008E12, 1547.7666666666667], [1.75122942E12, 1619.5666666666666], [1.75122972E12, 1580.5666666666666], [1.75123122E12, 490.03333333333336], [1.75123002E12, 1606.7], [1.75123032E12, 1561.9833333333333], [1.75123062E12, 1597.6166666666666], [1.75123092E12, 1581.1166666666666], [1.7512293E12, 1565.65], [1.7512296E12, 1574.85]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75123122E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 311.9901960784314, "minX": 1.75122918E12, "maxY": 1675.25, "series": [{"data": [[1.75123086E12, 494.0599999999998], [1.75123104E12, 314.4950495049506], [1.75122924E12, 315.5588235294117], [1.75122954E12, 312.77142857142866], [1.75122984E12, 313.98989898989913], [1.75123014E12, 317.99019607843127], [1.75123044E12, 312.80952380952385], [1.75123074E12, 341.8557692307692], [1.75123116E12, 320.5523809523809], [1.75123038E12, 315.0909090909091], [1.75123068E12, 313.3100000000001], [1.75122936E12, 312.86407766990294], [1.75122966E12, 314.8333333333334], [1.75122996E12, 313.42718446601936], [1.75123098E12, 314.05660377358487], [1.75123026E12, 312.9805825242719], [1.75123056E12, 311.9901960784314], [1.7512299E12, 313.9029126213593], [1.7512302E12, 530.7156862745098], [1.7512305E12, 314.29702970297024], [1.7512308E12, 323.08910891089107], [1.7512311E12, 315.5049504950494], [1.75122948E12, 320.8247422680411], [1.75122978E12, 312.8543689320389], [1.75123008E12, 315.32323232323233], [1.75122942E12, 321.5566037735849], [1.75122972E12, 315.1862745098038], [1.75123122E12, 313.58064516129036], [1.75123002E12, 314.46153846153834], [1.75123032E12, 322.00000000000006], [1.75123062E12, 313.7572815533981], [1.75123092E12, 320.9901960784314], [1.7512293E12, 313.66999999999996], [1.7512296E12, 402.6633663366336]], "isOverall": false, "label": "Create Booking", "isController": false}, {"data": [[1.75123086E12, 1507.1359223300974], [1.75123104E12, 1292.0800000000002], [1.75122924E12, 1282.6200000000001], [1.75122954E12, 1279.5145631067958], [1.75122984E12, 1275.0588235294122], [1.75123014E12, 1399.8155339805821], [1.75123044E12, 1257.8613861386136], [1.75123074E12, 1368.1250000000005], [1.75123116E12, 1305.8799999999999], [1.75123038E12, 1288.2980769230771], [1.75123068E12, 1278.8823529411766], [1.75122936E12, 1264.1078431372543], [1.75122966E12, 1267.673267326732], [1.75122996E12, 1268.7961165048544], [1.75123098E12, 1269.0970873786403], [1.75123026E12, 1259.6601941747576], [1.75123056E12, 1261.6300000000006], [1.7512299E12, 1269.7745098039213], [1.7512302E12, 1534.5000000000002], [1.7512305E12, 1281.3300970873793], [1.7512308E12, 1315.1999999999994], [1.7512311E12, 1299.019230769231], [1.75122918E12, 1675.25], [1.75122948E12, 1287.9595959595954], [1.75122978E12, 1273.1650485436894], [1.75123008E12, 1279.82], [1.75122942E12, 1269.1826923076924], [1.75122972E12, 1268.1764705882345], [1.75123122E12, 1263.9], [1.75123002E12, 1279.2352941176473], [1.75123032E12, 1266.6565656565663], [1.75123062E12, 1291.0097087378633], [1.75123092E12, 1266.4466019417482], [1.7512293E12, 1269.7766990291261], [1.7512296E12, 1524.8543689320381]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.75123086E12, 515.61], [1.75123104E12, 322.3557692307692], [1.75122924E12, 316.2244897959183], [1.75122954E12, 315.0196078431374], [1.75122984E12, 316.1188118811881], [1.75123014E12, 333.07000000000005], [1.75123044E12, 313.892156862745], [1.75123074E12, 349.91262135922335], [1.75123116E12, 334.76923076923083], [1.75123038E12, 314.03960396039605], [1.75123068E12, 316.4554455445546], [1.75122936E12, 315.81730769230785], [1.75122966E12, 315.2427184466019], [1.75122996E12, 313.92079207920796], [1.75123098E12, 313.153846153846], [1.75123026E12, 312.96190476190486], [1.75123056E12, 313.13861386138626], [1.7512299E12, 314.76237623762387], [1.7512302E12, 443.7745098039215], [1.7512305E12, 319.7669902912621], [1.7512308E12, 326.55882352941177], [1.7512311E12, 316.05050505050514], [1.75122948E12, 318.9797979797979], [1.75122978E12, 313.7941176470589], [1.75123008E12, 317.37254901960785], [1.75122942E12, 317.0097087378642], [1.75122972E12, 315.33980582524276], [1.75123122E12, 316.1142857142857], [1.75123002E12, 313.8301886792452], [1.75123032E12, 316.18000000000006], [1.75123062E12, 314.9423076923077], [1.75123092E12, 313.735294117647], [1.7512293E12, 313.3366336633665], [1.7512296E12, 384.22549019607857]], "isOverall": false, "label": "Search Booking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75123122E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 311.9901960784314, "minX": 1.75122918E12, "maxY": 1653.75, "series": [{"data": [[1.75123086E12, 494.0399999999999], [1.75123104E12, 314.48514851485163], [1.75122924E12, 315.4803921568627], [1.75122954E12, 312.7619047619049], [1.75122984E12, 313.93939393939394], [1.75123014E12, 317.9803921568629], [1.75123044E12, 312.80952380952385], [1.75123074E12, 341.8365384615385], [1.75123116E12, 320.5523809523809], [1.75123038E12, 315.08080808080814], [1.75123068E12, 313.3100000000001], [1.75122936E12, 312.85436893203905], [1.75122966E12, 314.82352941176464], [1.75122996E12, 313.41747572815535], [1.75123098E12, 314.03773584905673], [1.75123026E12, 312.9708737864078], [1.75123056E12, 311.9901960784314], [1.7512299E12, 313.9029126213593], [1.7512302E12, 530.6764705882355], [1.7512305E12, 314.29702970297024], [1.7512308E12, 323.08910891089107], [1.7512311E12, 315.5049504950494], [1.75122948E12, 320.7938144329897], [1.75122978E12, 312.82524271844665], [1.75123008E12, 315.3131313131313], [1.75122942E12, 321.5377358490565], [1.75122972E12, 315.1764705882353], [1.75123122E12, 313.58064516129036], [1.75123002E12, 314.4519230769229], [1.75123032E12, 321.990291262136], [1.75123062E12, 313.74757281553406], [1.75123092E12, 320.9901960784314], [1.7512293E12, 313.6199999999999], [1.7512296E12, 402.6336633663367]], "isOverall": false, "label": "Create Booking", "isController": false}, {"data": [[1.75123086E12, 1507.1359223300974], [1.75123104E12, 1292.0700000000002], [1.75122924E12, 1282.55], [1.75122954E12, 1279.495145631068], [1.75122984E12, 1275.0392156862742], [1.75123014E12, 1399.8058252427186], [1.75123044E12, 1257.8613861386136], [1.75123074E12, 1368.1153846153852], [1.75123116E12, 1305.8699999999994], [1.75123038E12, 1288.2980769230771], [1.75123068E12, 1278.8823529411766], [1.75122936E12, 1264.0784313725487], [1.75122966E12, 1267.633663366337], [1.75122996E12, 1268.7864077669904], [1.75123098E12, 1269.0970873786403], [1.75123026E12, 1259.6407766990292], [1.75123056E12, 1261.6100000000001], [1.7512299E12, 1269.7647058823532], [1.7512302E12, 1534.4901960784316], [1.7512305E12, 1281.3203883495153], [1.7512308E12, 1315.1899999999998], [1.7512311E12, 1299.019230769231], [1.75122918E12, 1653.75], [1.75122948E12, 1287.9494949494947], [1.75122978E12, 1273.1553398058256], [1.75123008E12, 1279.81], [1.75122942E12, 1269.153846153846], [1.75122972E12, 1268.1764705882345], [1.75123122E12, 1263.9], [1.75123002E12, 1279.1960784313726], [1.75123032E12, 1266.6565656565663], [1.75123062E12, 1291.0], [1.75123092E12, 1266.4368932038844], [1.7512293E12, 1269.73786407767], [1.7512296E12, 1524.8252427184464]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.75123086E12, 515.61], [1.75123104E12, 322.3461538461538], [1.75122924E12, 316.1938775510203], [1.75122954E12, 315.00980392156856], [1.75122984E12, 316.0990099009902], [1.75123014E12, 333.03999999999996], [1.75123044E12, 313.892156862745], [1.75123074E12, 349.9029126213593], [1.75123116E12, 334.76923076923083], [1.75123038E12, 314.03960396039605], [1.75123068E12, 316.4554455445546], [1.75122936E12, 315.798076923077], [1.75122966E12, 315.22330097087377], [1.75122996E12, 313.9108910891088], [1.75123098E12, 313.153846153846], [1.75123026E12, 312.9523809523809], [1.75123056E12, 313.11881188118815], [1.7512299E12, 314.74257425742576], [1.7512302E12, 443.75490196078425], [1.7512305E12, 319.74757281553406], [1.7512308E12, 326.55882352941177], [1.7512311E12, 316.0404040404041], [1.75122948E12, 318.95959595959596], [1.75122978E12, 313.7941176470589], [1.75123008E12, 317.36274509803934], [1.75122942E12, 316.99029126213594], [1.75122972E12, 315.32038834951476], [1.75123122E12, 316.1142857142857], [1.75123002E12, 313.8301886792452], [1.75123032E12, 316.17], [1.75123062E12, 314.9423076923077], [1.75123092E12, 313.72549019607845], [1.7512293E12, 313.26732673267327], [1.7512296E12, 384.21568627450984]], "isOverall": false, "label": "Search Booking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75123122E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.75122918E12, "maxY": 1333.5, "series": [{"data": [[1.75123086E12, 0.0], [1.75123104E12, 0.0], [1.75122924E12, 0.0], [1.75122954E12, 0.0], [1.75122984E12, 0.0], [1.75123014E12, 0.0], [1.75123044E12, 0.0], [1.75123074E12, 0.0], [1.75123116E12, 0.0], [1.75123038E12, 0.0], [1.75123068E12, 0.0], [1.75122936E12, 0.0], [1.75122966E12, 0.0], [1.75122996E12, 0.0], [1.75123098E12, 0.0], [1.75123026E12, 0.0], [1.75123056E12, 0.0], [1.7512299E12, 0.0], [1.7512302E12, 0.0], [1.7512305E12, 0.0], [1.7512308E12, 0.0], [1.7512311E12, 0.0], [1.75122948E12, 0.0], [1.75122978E12, 0.0], [1.75123008E12, 0.0], [1.75122942E12, 0.0], [1.75122972E12, 0.0], [1.75123122E12, 0.0], [1.75123002E12, 0.0], [1.75123032E12, 0.0], [1.75123062E12, 0.0], [1.75123092E12, 0.0], [1.7512293E12, 0.0], [1.7512296E12, 0.0]], "isOverall": false, "label": "Create Booking", "isController": false}, {"data": [[1.75123086E12, 1008.6893203883491], [1.75123104E12, 976.3499999999999], [1.75122924E12, 968.0199999999999], [1.75122954E12, 967.0388349514564], [1.75122984E12, 961.1568627450985], [1.75123014E12, 1082.5631067961165], [1.75123044E12, 945.1584158415844], [1.75123074E12, 1037.221153846154], [1.75123116E12, 978.36], [1.75123038E12, 975.3076923076923], [1.75123068E12, 964.7745098039215], [1.75122936E12, 950.7941176470591], [1.75122966E12, 954.6633663366338], [1.75122996E12, 955.708737864078], [1.75123098E12, 956.3398058252429], [1.75123026E12, 947.2038834951459], [1.75123056E12, 948.4499999999999], [1.7512299E12, 957.3921568627452], [1.7512302E12, 947.049019607843], [1.7512305E12, 965.0000000000001], [1.7512308E12, 985.9900000000001], [1.7512311E12, 982.7884615384613], [1.75122918E12, 1333.5], [1.75122948E12, 970.5151515151515], [1.75122978E12, 959.3592233009707], [1.75123008E12, 967.7599999999999], [1.75122942E12, 955.3846153846152], [1.75122972E12, 954.6078431372546], [1.75123122E12, 950.2333333333333], [1.75123002E12, 958.2941176470591], [1.75123032E12, 952.2323232323233], [1.75123062E12, 976.378640776699], [1.75123092E12, 954.291262135922], [1.7512293E12, 956.6796116504853], [1.7512296E12, 949.4563106796119]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.75123086E12, 0.0], [1.75123104E12, 0.0], [1.75122924E12, 0.0], [1.75122954E12, 0.0], [1.75122984E12, 0.0], [1.75123014E12, 0.0], [1.75123044E12, 0.0], [1.75123074E12, 0.0], [1.75123116E12, 0.0], [1.75123038E12, 0.0], [1.75123068E12, 0.0], [1.75122936E12, 0.0], [1.75122966E12, 0.0], [1.75122996E12, 0.0], [1.75123098E12, 0.0], [1.75123026E12, 0.0], [1.75123056E12, 0.0], [1.7512299E12, 0.0], [1.7512302E12, 0.0], [1.7512305E12, 0.0], [1.7512308E12, 0.0], [1.7512311E12, 0.0], [1.75122948E12, 0.0], [1.75122978E12, 0.0], [1.75123008E12, 0.0], [1.75122942E12, 0.0], [1.75122972E12, 0.0], [1.75123122E12, 0.0], [1.75123002E12, 0.0], [1.75123032E12, 0.0], [1.75123062E12, 0.0], [1.75123092E12, 0.0], [1.7512293E12, 0.0], [1.7512296E12, 0.0]], "isOverall": false, "label": "Search Booking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75123122E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 295.0, "minX": 1.75122918E12, "maxY": 9249.0, "series": [{"data": [[1.75123086E12, 4391.0], [1.75123104E12, 2852.0], [1.75122924E12, 2278.0], [1.75122954E12, 3430.0], [1.75122984E12, 1706.0], [1.75123014E12, 7449.0], [1.75123044E12, 1349.0], [1.75123074E12, 2305.0], [1.75123116E12, 2272.0], [1.75123038E12, 1924.0], [1.75123068E12, 1868.0], [1.75122936E12, 1527.0], [1.75122966E12, 1652.0], [1.75122996E12, 2196.0], [1.75123098E12, 2276.0], [1.75123026E12, 1491.0], [1.75123056E12, 1630.0], [1.7512299E12, 1709.0], [1.7512302E12, 5273.0], [1.7512305E12, 2320.0], [1.7512308E12, 2553.0], [1.7512311E12, 2242.0], [1.75122918E12, 2078.0], [1.75122948E12, 1660.0], [1.75122978E12, 2004.0], [1.75123008E12, 2032.0], [1.75122942E12, 1565.0], [1.75122972E12, 1623.0], [1.75123122E12, 1327.0], [1.75123002E12, 2375.0], [1.75123032E12, 1524.0], [1.75123062E12, 2892.0], [1.75123092E12, 1962.0], [1.7512293E12, 1893.0], [1.7512296E12, 9249.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75123086E12, 301.0], [1.75123104E12, 299.0], [1.75122924E12, 296.0], [1.75122954E12, 296.0], [1.75122984E12, 301.0], [1.75123014E12, 299.0], [1.75123044E12, 298.0], [1.75123074E12, 301.0], [1.75123116E12, 303.0], [1.75123038E12, 299.0], [1.75123068E12, 298.0], [1.75122936E12, 301.0], [1.75122966E12, 297.0], [1.75122996E12, 297.0], [1.75123098E12, 300.0], [1.75123026E12, 297.0], [1.75123056E12, 296.0], [1.7512299E12, 300.0], [1.7512302E12, 296.0], [1.7512305E12, 296.0], [1.7512308E12, 298.0], [1.7512311E12, 304.0], [1.75122918E12, 1255.0], [1.75122948E12, 301.0], [1.75122978E12, 297.0], [1.75123008E12, 298.0], [1.75122942E12, 302.0], [1.75122972E12, 300.0], [1.75123122E12, 304.0], [1.75123002E12, 298.0], [1.75123032E12, 299.0], [1.75123062E12, 295.0], [1.75123092E12, 297.0], [1.7512293E12, 299.0], [1.7512296E12, 300.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75123086E12, 1360.3999999999999], [1.75123104E12, 1278.0], [1.75122924E12, 1285.9], [1.75122954E12, 1272.8000000000002], [1.75122984E12, 1281.4], [1.75123014E12, 1277.0], [1.75123044E12, 1268.0], [1.75123074E12, 1400.8], [1.75123116E12, 1286.0], [1.75123038E12, 1285.5], [1.75123068E12, 1281.6], [1.75122936E12, 1271.0], [1.75122966E12, 1278.0], [1.75122996E12, 1272.0], [1.75123098E12, 1265.0], [1.75123026E12, 1275.0], [1.75123056E12, 1266.6], [1.7512299E12, 1276.0], [1.7512302E12, 1288.0], [1.7512305E12, 1275.2], [1.7512308E12, 1288.4], [1.7512311E12, 1289.0], [1.75122918E12, 2078.0], [1.75122948E12, 1276.8000000000002], [1.75122978E12, 1274.1], [1.75123008E12, 1274.0], [1.75122942E12, 1277.0], [1.75122972E12, 1273.2], [1.75123122E12, 1274.0], [1.75123002E12, 1275.1], [1.75123032E12, 1277.7], [1.75123062E12, 1273.9], [1.75123092E12, 1274.4], [1.7512293E12, 1271.0], [1.7512296E12, 1281.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75123086E12, 4311.779999999999], [1.75123104E12, 1394.1799999999998], [1.75122924E12, 1401.7300000000002], [1.75122954E12, 1332.5799999999997], [1.75122984E12, 1552.039999999996], [1.75123014E12, 3131.719999999999], [1.75123044E12, 1326.2000000000005], [1.75123074E12, 1559.88], [1.75123116E12, 1698.6999999999975], [1.75123038E12, 1645.8999999999987], [1.75123068E12, 1559.6], [1.75122936E12, 1308.6], [1.75122966E12, 1356.39], [1.75122996E12, 1324.4000000000003], [1.75123098E12, 1462.700000000002], [1.75123026E12, 1326.92], [1.75123056E12, 1496.959999999999], [1.7512299E12, 1429.3500000000006], [1.7512302E12, 5236.97], [1.7512305E12, 1503.9600000000005], [1.7512308E12, 1742.7599999999993], [1.7512311E12, 1690.9], [1.75122918E12, 2078.0], [1.75122948E12, 1624.5200000000002], [1.75122978E12, 1390.2100000000007], [1.75123008E12, 1646.1200000000017], [1.75122942E12, 1371.5600000000006], [1.75122972E12, 1486.9200000000028], [1.75123122E12, 1327.0], [1.75123002E12, 1390.5400000000002], [1.75123032E12, 1315.8799999999999], [1.75123062E12, 1654.7399999999964], [1.75123092E12, 1327.2000000000003], [1.7512293E12, 1338.1999999999998], [1.7512296E12, 5191.559999999981]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75123086E12, 333.0], [1.75123104E12, 319.0], [1.75122924E12, 319.5], [1.75122954E12, 318.0], [1.75122984E12, 320.0], [1.75123014E12, 320.0], [1.75123044E12, 317.0], [1.75123074E12, 364.0], [1.75123116E12, 321.0], [1.75123038E12, 318.0], [1.75123068E12, 319.0], [1.75122936E12, 317.0], [1.75122966E12, 319.0], [1.75122996E12, 318.0], [1.75123098E12, 317.0], [1.75123026E12, 316.0], [1.75123056E12, 316.0], [1.7512299E12, 318.0], [1.7512302E12, 320.0], [1.7512305E12, 318.0], [1.7512308E12, 323.0], [1.7512311E12, 320.0], [1.75122918E12, 1684.0], [1.75122948E12, 320.0], [1.75122978E12, 317.0], [1.75123008E12, 320.0], [1.75122942E12, 319.0], [1.75122972E12, 319.0], [1.75123122E12, 317.5], [1.75123002E12, 317.0], [1.75123032E12, 319.0], [1.75123062E12, 318.0], [1.75123092E12, 317.0], [1.7512293E12, 316.0], [1.7512296E12, 319.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.75123086E12, 1532.499999999999], [1.75123104E12, 1290.7], [1.75122924E12, 1313.95], [1.75122954E12, 1291.45], [1.75122984E12, 1294.85], [1.75123014E12, 1305.0], [1.75123044E12, 1286.55], [1.75123074E12, 1460.0], [1.75123116E12, 1312.5], [1.75123038E12, 1307.5], [1.75123068E12, 1299.0], [1.75122936E12, 1285.0], [1.75122966E12, 1292.9499999999998], [1.75122996E12, 1285.1999999999998], [1.75123098E12, 1279.0], [1.75123026E12, 1287.6], [1.75123056E12, 1276.8], [1.7512299E12, 1284.3], [1.7512302E12, 2363.2999999999906], [1.7512305E12, 1299.8], [1.7512308E12, 1389.4], [1.7512311E12, 1305.75], [1.75122918E12, 2078.0], [1.75122948E12, 1302.0], [1.75122978E12, 1296.0], [1.75123008E12, 1289.9], [1.75122942E12, 1288.3], [1.75122972E12, 1286.0], [1.75123122E12, 1295.35], [1.75123002E12, 1290.0], [1.75123032E12, 1288.6999999999998], [1.75123062E12, 1287.45], [1.75123092E12, 1287.6], [1.7512293E12, 1287.0], [1.7512296E12, 1315.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75123122E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 317.0, "minX": 1.0, "maxY": 6321.0, "series": [{"data": [[2.0, 319.0], [8.0, 319.0], [9.0, 317.0], [10.0, 318.0], [11.0, 318.0], [3.0, 319.0], [12.0, 317.0], [13.0, 1205.0], [15.0, 3286.0], [4.0, 319.0], [1.0, 320.5], [5.0, 320.0], [6.0, 319.0], [7.0, 318.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 4317.0], [5.0, 2816.0], [11.0, 2317.0], [12.0, 6321.0], [13.0, 4812.5], [15.0, 2810.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 15.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 317.0, "minX": 1.0, "maxY": 6321.0, "series": [{"data": [[2.0, 319.0], [8.0, 319.0], [9.0, 317.0], [10.0, 318.0], [11.0, 318.0], [3.0, 319.0], [12.0, 317.0], [13.0, 1205.0], [15.0, 3286.0], [4.0, 319.0], [1.0, 320.5], [5.0, 320.0], [6.0, 319.0], [7.0, 318.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 4317.0], [5.0, 2816.0], [11.0, 2317.0], [12.0, 6321.0], [13.0, 4812.5], [15.0, 2810.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 15.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.75122918E12, "maxY": 5.233333333333333, "series": [{"data": [[1.75123086E12, 5.05], [1.75123104E12, 5.083333333333333], [1.75122924E12, 5.016666666666667], [1.75122954E12, 5.183333333333334], [1.75122984E12, 5.05], [1.75123014E12, 5.083333333333333], [1.75123044E12, 5.166666666666667], [1.75123074E12, 5.133333333333334], [1.75123116E12, 5.15], [1.75123038E12, 5.066666666666666], [1.75123068E12, 5.033333333333333], [1.75122936E12, 5.15], [1.75122966E12, 5.116666666666666], [1.75122996E12, 5.133333333333334], [1.75123098E12, 5.233333333333333], [1.75123026E12, 5.183333333333334], [1.75123056E12, 5.066666666666666], [1.7512299E12, 5.1], [1.7512302E12, 5.1], [1.7512305E12, 5.116666666666666], [1.7512308E12, 5.066666666666666], [1.7512311E12, 5.066666666666666], [1.75122918E12, 0.1], [1.75122948E12, 4.916666666666667], [1.75122978E12, 5.116666666666666], [1.75123008E12, 5.016666666666667], [1.75122942E12, 5.233333333333333], [1.75122972E12, 5.1], [1.75123122E12, 1.55], [1.75123002E12, 5.2], [1.75123032E12, 5.016666666666667], [1.75123062E12, 5.166666666666667], [1.75123092E12, 5.116666666666666], [1.7512293E12, 5.05], [1.7512296E12, 5.066666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75123122E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.75122918E12, "maxY": 5.216666666666667, "series": [{"data": [[1.75123086E12, 4.95], [1.75123104E12, 5.083333333333333], [1.75122924E12, 5.0], [1.75122954E12, 5.166666666666667], [1.75122984E12, 5.033333333333333], [1.75123014E12, 5.083333333333333], [1.75123044E12, 5.133333333333334], [1.75123074E12, 5.183333333333334], [1.75123116E12, 5.15], [1.75123038E12, 5.066666666666666], [1.75123068E12, 5.05], [1.75122936E12, 5.15], [1.75122966E12, 5.1], [1.75122996E12, 5.116666666666666], [1.75123098E12, 5.216666666666667], [1.75123026E12, 5.183333333333334], [1.75123056E12, 5.05], [1.7512299E12, 5.1], [1.7512302E12, 5.033333333333333], [1.7512305E12, 5.116666666666666], [1.7512308E12, 5.05], [1.7512311E12, 5.066666666666666], [1.75122918E12, 0.06666666666666667], [1.75122948E12, 4.916666666666667], [1.75122978E12, 5.133333333333334], [1.75123008E12, 5.016666666666667], [1.75122942E12, 5.216666666666667], [1.75122972E12, 5.116666666666666], [1.75123122E12, 1.6], [1.75123002E12, 5.2], [1.75123032E12, 5.033333333333333], [1.75123062E12, 5.166666666666667], [1.75123092E12, 5.116666666666666], [1.7512293E12, 5.066666666666666], [1.7512296E12, 5.05]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.75123086E12, 0.06666666666666667], [1.7512302E12, 0.06666666666666667], [1.7512296E12, 0.05]], "isOverall": false, "label": "404", "isController": false}, {"data": [[1.75123086E12, 0.03333333333333333]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75123122E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.75122918E12, "maxY": 1.7666666666666666, "series": [{"data": [[1.75123086E12, 1.65], [1.75123104E12, 1.6833333333333333], [1.75122924E12, 1.7], [1.75122954E12, 1.75], [1.75122984E12, 1.65], [1.75123014E12, 1.7], [1.75123044E12, 1.75], [1.75123074E12, 1.7333333333333334], [1.75123116E12, 1.75], [1.75123038E12, 1.65], [1.75123068E12, 1.6666666666666667], [1.75122936E12, 1.7166666666666666], [1.75122966E12, 1.7], [1.75122996E12, 1.7166666666666666], [1.75123098E12, 1.7666666666666666], [1.75123026E12, 1.7166666666666666], [1.75123056E12, 1.7], [1.7512299E12, 1.7166666666666666], [1.7512302E12, 1.7], [1.7512305E12, 1.6833333333333333], [1.7512308E12, 1.6833333333333333], [1.7512311E12, 1.6833333333333333], [1.75122948E12, 1.6166666666666667], [1.75122978E12, 1.7166666666666666], [1.75123008E12, 1.65], [1.75122942E12, 1.7666666666666666], [1.75122972E12, 1.7], [1.75123122E12, 0.5166666666666667], [1.75123002E12, 1.7333333333333334], [1.75123032E12, 1.7166666666666666], [1.75123062E12, 1.7166666666666666], [1.75123092E12, 1.7], [1.7512293E12, 1.6666666666666667], [1.7512296E12, 1.6833333333333333]], "isOverall": false, "label": "Create Booking-success", "isController": false}, {"data": [[1.75123086E12, 0.06666666666666667], [1.7512302E12, 0.06666666666666667], [1.7512296E12, 0.05]], "isOverall": false, "label": "Search Booking-failure", "isController": false}, {"data": [[1.75123086E12, 0.016666666666666666]], "isOverall": false, "label": "Create Booking-failure", "isController": false}, {"data": [[1.75123086E12, 1.7], [1.75123104E12, 1.6666666666666667], [1.75122924E12, 1.6666666666666667], [1.75122954E12, 1.7166666666666666], [1.75122984E12, 1.7], [1.75123014E12, 1.7166666666666666], [1.75123044E12, 1.6833333333333333], [1.75123074E12, 1.7333333333333334], [1.75123116E12, 1.6666666666666667], [1.75123038E12, 1.7333333333333334], [1.75123068E12, 1.7], [1.75122936E12, 1.7], [1.75122966E12, 1.6833333333333333], [1.75122996E12, 1.7166666666666666], [1.75123098E12, 1.7166666666666666], [1.75123026E12, 1.7166666666666666], [1.75123056E12, 1.6666666666666667], [1.7512299E12, 1.7], [1.7512302E12, 1.7], [1.7512305E12, 1.7166666666666666], [1.7512308E12, 1.6666666666666667], [1.7512311E12, 1.7333333333333334], [1.75122918E12, 0.06666666666666667], [1.75122948E12, 1.65], [1.75122978E12, 1.7166666666666666], [1.75123008E12, 1.6666666666666667], [1.75122942E12, 1.7333333333333334], [1.75122972E12, 1.7], [1.75123122E12, 0.5], [1.75123002E12, 1.7], [1.75123032E12, 1.65], [1.75123062E12, 1.7166666666666666], [1.75123092E12, 1.7166666666666666], [1.7512293E12, 1.7166666666666666], [1.7512296E12, 1.7166666666666666]], "isOverall": false, "label": "Login-success", "isController": false}, {"data": [[1.75123086E12, 0.016666666666666666]], "isOverall": false, "label": "Login-failure", "isController": false}, {"data": [[1.75123086E12, 1.6], [1.75123104E12, 1.7333333333333334], [1.75122924E12, 1.6333333333333333], [1.75122954E12, 1.7], [1.75122984E12, 1.6833333333333333], [1.75123014E12, 1.6666666666666667], [1.75123044E12, 1.7], [1.75123074E12, 1.7166666666666666], [1.75123116E12, 1.7333333333333334], [1.75123038E12, 1.6833333333333333], [1.75123068E12, 1.6833333333333333], [1.75122936E12, 1.7333333333333334], [1.75122966E12, 1.7166666666666666], [1.75122996E12, 1.6833333333333333], [1.75123098E12, 1.7333333333333334], [1.75123026E12, 1.75], [1.75123056E12, 1.6833333333333333], [1.7512299E12, 1.6833333333333333], [1.7512302E12, 1.6333333333333333], [1.7512305E12, 1.7166666666666666], [1.7512308E12, 1.7], [1.7512311E12, 1.65], [1.75122948E12, 1.65], [1.75122978E12, 1.7], [1.75123008E12, 1.7], [1.75122942E12, 1.7166666666666666], [1.75122972E12, 1.7166666666666666], [1.75123122E12, 0.5833333333333334], [1.75123002E12, 1.7666666666666666], [1.75123032E12, 1.6666666666666667], [1.75123062E12, 1.7333333333333334], [1.75123092E12, 1.7], [1.7512293E12, 1.6833333333333333], [1.7512296E12, 1.65]], "isOverall": false, "label": "Search Booking-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75123122E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.75122918E12, "maxY": 5.216666666666667, "series": [{"data": [[1.75123086E12, 4.95], [1.75123104E12, 5.083333333333333], [1.75122924E12, 5.0], [1.75122954E12, 5.166666666666667], [1.75122984E12, 5.033333333333333], [1.75123014E12, 5.083333333333333], [1.75123044E12, 5.133333333333334], [1.75123074E12, 5.183333333333334], [1.75123116E12, 5.15], [1.75123038E12, 5.066666666666666], [1.75123068E12, 5.05], [1.75122936E12, 5.15], [1.75122966E12, 5.1], [1.75122996E12, 5.116666666666666], [1.75123098E12, 5.216666666666667], [1.75123026E12, 5.183333333333334], [1.75123056E12, 5.05], [1.7512299E12, 5.1], [1.7512302E12, 5.033333333333333], [1.7512305E12, 5.116666666666666], [1.7512308E12, 5.05], [1.7512311E12, 5.066666666666666], [1.75122918E12, 0.06666666666666667], [1.75122948E12, 4.916666666666667], [1.75122978E12, 5.133333333333334], [1.75123008E12, 5.016666666666667], [1.75122942E12, 5.216666666666667], [1.75122972E12, 5.116666666666666], [1.75123122E12, 1.6], [1.75123002E12, 5.2], [1.75123032E12, 5.033333333333333], [1.75123062E12, 5.166666666666667], [1.75123092E12, 5.116666666666666], [1.7512293E12, 5.066666666666666], [1.7512296E12, 5.05]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.75123086E12, 0.1], [1.7512302E12, 0.06666666666666667], [1.7512296E12, 0.05]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75123122E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

